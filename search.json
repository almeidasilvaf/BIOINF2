[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bioinformatics 2",
    "section": "",
    "text": "Preface\nThis book aims to provide learners with a hands-on introduction to topics in Bioinformatics, and the materials here are used in the practical lessons of the course C000500A - Bioinformatics 2 at Ghent University.\nEach book chapter represents the contents of a practical lesson from the UGent courses, and they serve both as a guide during the lessons and as a reference to go back later.\nThe book will cover:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Bioinformatics 2",
    "section": "Setup",
    "text": "Setup\nTo run the code in this book, you will need to install:\n\nR (&gt;=4.2.0): go to the CRAN website, choose your OS (Windows, Linux, or macOS), and follow the installation instructions.\nRStudio Desktop: go to the RStudio website and download the installer for your OS.\nIQ-TREE 2: go to the IQ-TREE download page and follow the installation instructions for your OS.\n\nAfter installing R and RStudio, you will need to install some required R packages. To do that, open RStudio and execute the code below in your console:\n\n# Install BiocManager\ninstall.packages(\"BiocManager\")\n\n# Use {BiocManager} to install required packages (if they are not installed)\npackages &lt;- c(\n    \"here\", \n    \"cogeqc\",\n    \"Biostrings\", \n    \"tidyverse\", \n    \"ape\",\n    \"msa\", \n    \"tidyverse\",\n    \"SummarizedExperiment\",\n    \"DESeq2\",\n    \"clusterProfiler\",\n    \"enrichplot\",\n    \"org.Mm.eg.db\",\n    \"universalmotif\"\n)\n\nBiocManager::install(packages)\n\nAfter that, you should have everything ready.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html",
    "href": "chapters/phylogenomics.html",
    "title": "1  Phylogenomics",
    "section": "",
    "text": "1.1 Goals of this lesson\nPhylogenomics aims at reconstructing the evolutionary histories of organisms taking into account whole genomes or large fractions of genomes. In this lesson, you will learn how to infer a species tree from whole-genome sequence data using a standard phylogenomics pipeline.\nIn this lesson, you will learn to:\nWe will start by loading the required packages.\nlibrary(here)\nlibrary(cogeqc)\nlibrary(Biostrings)\nlibrary(tidyverse)\nlibrary(ape)\nlibrary(msa)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e8)\n\nsource(here(\"code\", \"utils.R\")) # helper functions",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#goals-of-this-lesson",
    "href": "chapters/phylogenomics.html#goals-of-this-lesson",
    "title": "1  Phylogenomics",
    "section": "",
    "text": "identify single-copy orthologs, typical markers for phylogenomic studies;\nperform multiple sequence alignments;\ninfer phylogenetic trees using concatenation-based (Minh et al. 2020) and coalescent-based (Zhang, Sayyari, and Mirarab 2017) approaches;\nread, explore, and visualize phylogenetic trees in R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#data-acquisition",
    "href": "chapters/phylogenomics.html#data-acquisition",
    "title": "1  Phylogenomics",
    "section": "1.2 Data acquisition",
    "text": "1.2 Data acquisition\nIn this lesson, we will use data from Ensembl (Harrison et al. 2024), a database with genomic data for vertebrate species. However, since using all species on Ensembl would lead to much longer runtimes, we will only use species that are present on Ensembl Pan Compara, a cross-species comparative resource on Ensembl. We will start by retrieving species metadata.\n\n# Get metadata for species on Pan Compara\nmetadata &lt;- read_tsv(\n    \"https://ftp.ensembl.org/pub/release-113/species_EnsemblVertebrates.txt\",\n    show_col_types = FALSE, col_select = 1:15\n) |&gt; \n    filter(pan_compara == \"Y\") |&gt;\n    dplyr::select(1:6)\n\nmetadata\n\n# A tibble: 12 × 6\n   `#name`              species division taxonomy_id assembly assembly_accession\n   &lt;chr&gt;                &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;             \n 1 Green anole          anolis… Ensembl…       28377 AnoCar2… GCA_000090745.2   \n 2 C.savignyi           ciona_… Ensembl…       51511 CSAV 2.0 &lt;NA&gt;              \n 3 Zebrafish            danio_… Ensembl…        7955 GRCz11   GCA_000002035.4   \n 4 Chicken              gallus… Ensembl…        9031 bGalGal… GCA_016699485.1   \n 5 Stickleback          gaster… Ensembl…      481459 GAculea… GCA_016920845.1   \n 6 Human                homo_s… Ensembl…        9606 GRCh38.… GCA_000001405.29  \n 7 Opossum              monode… Ensembl…       13616 ASM229v1 GCA_000002295.1   \n 8 Mouse                mus_mu… Ensembl…       10090 GRCm39   GCA_000001635.9   \n 9 Platypus             ornith… Ensembl…        9258 mOrnAna… GCA_004115215.2   \n10 Chimpanzee           pan_tr… Ensembl…        9598 Pan_tro… GCA_000001515.5   \n11 Sumatran orangutan   pongo_… Ensembl…        9601 Susie_P… GCA_002880775.3   \n12 Tropical clawed frog xenopu… Ensembl…        8364 UCB_Xtr… GCA_000004195.4   \n\n\nThen, we will obtain whole-genome protein sequences (only one for each gene) for each species. To do that, we will define a helper function to:\n\nRead FASTA files directly from Ensembl’s FTP repository as AAStringSet objects.\nFilter the AAStringSet objects to keep only translated sequences of longest transcripts (i.e., one gene -&gt; one protein).\n\n\n# Define helper function to read proteomes from Ensembl\nget_proteomes &lt;- function(species) {\n    \n    # Get URL to FTP directory\n    surl &lt;- file.path(\n        \"https://ftp.ensembl.org/pub/release-113/fasta\", \n        species, \"pep/\"\n    )\n    \n    # Get protein sequences of longest transcripts for each gene\n    seqs &lt;- lapply(surl, function(x) {\n        \n        ## Get links to FASTA files\n        fname &lt;- XML::getHTMLLinks(RCurl::getURL(x, dirlistonly = TRUE))\n        fname &lt;- fname[grep(\"\\\\.fa\\\\.gz$\", fname)]\n        fname &lt;- fname[!grepl(\"abinitio\", fname)]\n        seq_path &lt;- paste0(x, fname)\n        \n        ## Read sequences as an `AAStringSet` object\n        seq &lt;- Biostrings::readAAStringSet(seq_path)\n        names(seq) &lt;- gsub(\" .*\", \"\", gsub(\".*gene:\", \"\", names(seq)))\n        \n        ## Keep only translated sequence of longest transcript\n        seq &lt;- seq[order(Biostrings::width(seq), decreasing = TRUE)]\n        seq &lt;- seq[!duplicated(names(seq))]\n        \n        return(seq)\n    })\n    names(seqs) &lt;- gsub(\"_\", \"\\\\.\", species)\n    \n    return(seqs)\n}\n\nNow, we will actually get the proteomes by executing the function we’ve just defined.\n\n# Get proteomes for all species\nproteomes &lt;- get_proteomes(metadata$species)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#obtaining-busco-genes",
    "href": "chapters/phylogenomics.html#obtaining-busco-genes",
    "title": "1  Phylogenomics",
    "section": "1.3 Obtaining BUSCO genes",
    "text": "1.3 Obtaining BUSCO genes\nNow that we have whole-genome protein sequences for each species, we can run BUSCO to identify single-copy gene families in our proteomes. To do that, BUSCO relies on comparing our sequences with pre-built profile Hidden Markov Models (HMMs) for a particular clade. These profiles HMMs are available for a bunch of different clades (referred to as ‘lineage data sets’), and selecting the right lineage data set is critical to correctly identify single-copy gene families. To view a list of all lineage data sets available in BUSCO, you can run the following code:\n\n# List lineage datasets\ncogeqc::list_busco_datasets()\n\nAs you can see, the lineage data sets in BUSCO have a hierarchical (i.e., tree-like) structure. For example, the lineage vertebrata_odb10 contains two lineages, actinopterygii_odb10 and tetrapoda_odb10. The lineage tetrapoda_odb10, in turn, contains the lineages mammalia_odb10 and sauropsida_odb10. The best lineage data set is usually thought to be the one that includes all species in your data set in the most taxonomically restricted way. This is because the number of BUSCO genes decreases as we go from a broader clade (e.g. Vertebrata) to a stricter clade (e.g. Mammalia). For instance, if your data set contains only mammals, you could use lineages metazoa_odb10, vertebrata_odb10, tetrapoda_odb10, or mammalia_odb10. Let’s see the number of BUSCO genes for each of these clades.\n\n# Plot number of BUSCO genes for clades from metazoa to mammalia\nclades &lt;- \"metazoa|vertebrata|tetrapoda|mammalia\"\n\np_lineages &lt;- rvest::read_html(\"https://busco.ezlab.org/list_of_lineages.html\") |&gt;\n    rvest::html_table() |&gt;\n    purrr::pluck(1) |&gt;\n    dplyr::rename(lineage = 1, ngenes = 2) |&gt;\n    filter(str_detect(lineage, clades)) |&gt;\n    arrange(-ngenes) |&gt;\n    mutate(lineage = as_factor(lineage)) |&gt;\n    ggplot(aes(x = ngenes, y = lineage)) +\n    geom_bar(stat = \"identity\", fill = \"deepskyblue4\", color = \"black\") +\n    geom_text(aes(label = ngenes), hjust = -0.2) +\n    scale_x_continuous(limits = c(0, 1.2e4), expand = c(0.01, 0.01)) +\n    theme_classic() +\n    labs(\n        title = \"Number of BUSCO genes for each lineage\",\n        x = \"Number of genes\", y = \"Lineage\"\n    )\n\np_lineages\n\n\n\n\n\n\n\n\nThe plot shows that more restrict clades have more BUSCO genes. Thus, if you want to infer a phylogeny for some mammals, you should choose mammalia_odb10 as your lineage data set, not broader clades that include other things beside mammals (e.g. vertebrata_odb10 or metazoa_odb10).\nThe example data set in this lesson contains a diverse set of animals, most of which are vertebrates, but also with the tunicate Ciona savignyi (outgroup). Given this data set (vertebrates + a tunicate), the best lineage data set is metazoa_odb10.\nTo identify what BUSCO genes can be found in our data set, we can use the function run_busco from the R package cogeqc to run BUSCO in protein mode using metazoa_odb10 as lineage data set. However, because running BUSCO takes several minutes, we will load a pre-computed set of BUSCO genes identified in this data set.\n\n# Load pre-computed BUSCO genes\nbusco_genes &lt;- readRDS(here(\"output\", \"busco_seqs.rds\"))\n\nThe file busco_seqs.rds was created with the code below, which does the following:\n\nRun BUSCO in protein mode using metazoa_odb10 as lineage data set.\nIdentify BUSCO genes that are shared by all species (i.e., species coverage of 100%);\nRead sequences of conserved BUSCO genes as a list of AAStringSet objects, each containing 12 sequences (the BUSCO gene i in all 12 species).\n\n\n\nShow me the code\n# Export sequences to a directory\nseq_dir &lt;- file.path(tempdir(), \"seqs\")\ndir.create(seq_dir)\n\ne &lt;- lapply(seq_along(proteomes), function(x) {\n    fn &lt;- file.path(seq_dir, paste0(names(proteomes)[x], \".fasta\"))\n    writeXStringSet(proteomes[[x]], filepath = fn)\n})\n\n# Run BUSCO in `protein` mode\nbusco_output &lt;- file.path(tempdir(), \"busco\") # path to BUSCO output\ndata_output &lt;- file.path(tempdir(), \"datasets\") # path to BUSCO datasets\n\ncogeqc::run_busco(\n    sequence = seq_dir,\n    outlabel = \"ensembl\",\n    mode = \"proteins\",\n    lineage = \"metazoa_odb10\",\n    outpath = busco_output,\n    download_path = data_output,\n    threads = 4\n)\n\n# Read sequences of BUSCO genes\nbusco_seqdir &lt;- file.path(busco_output, \"ensembl\")\nbusco_seqs &lt;- read_busco_sequences(busco_seqdir)\n\n# Save object to file\nsaveRDS(busco_seqs, compress = \"xz\", file = here(\"output\", \"busco_seqs.rds\"))\n\n\nThis is what the object looks like:\n\n# Take a look at the first 3 BUSCO genes\nhead(busco_genes, 3)\n\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1050 MALSLDREAYYRRIKRLYSNWQK...HHRSSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [2]  1040 MSISLDKDAFFRRLKKIYSTWES...SDDDEGETMRRVGRIGMNWRRR ciona.savignyi\n [3]  1033 MAVSLDKDAFYRRIKRLYGNWKK...SNRKRKGRSSAPPPRSKKKRRH danio.rerio\n [4]   642 MEAVRKQKPELMAKITKNLGFAM...GRWGRWGRWGRWGHWGCWGQWG gallus.gallus\n [5]   938 MAVNLDKEAYYRRIKRFYGNWKK...EDSDEDYDSDTEDSSEILLFGH gasterosteus.acul...\n ...   ... ...\n [8]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[10]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK pan.troglodytes\n[11]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK pongo.abelii\n[12]  1035 MAVTLDKEAYYRRIKRFYGNWKK...QKGGKKRKVHAPAPNPSKKRKK xenopus.tropicalis\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   988 MAAAAASSSASGASSSSSSGPGG...NNWQSKIGEILVLVAAKIKNTF anolis.carolinensis\n [2]   739 NRSFHPQFSGYAGNLFSSGPYEK...KNWKLKTKELLPIISSKVPVAF ciona.savignyi\n [3]   974 MASSAAKQPPKNASKAPSGGAGG...LNWQKNIGEILVLVASKIKNSF danio.rerio\n [4]   999 MNKKKKPFLGMPAPLGYVPGLGR...VNWQKKIGEILVLVAAKLKNTF gallus.gallus\n [5]   973 MASTGIKQGPKLVSKSSAGGAGA...TVSRTSRSAVSRSVFPLKSITV gasterosteus.acul...\n ...   ... ...\n [8]   941 MNKKKKPFLGMPAPLGYVPGLGR...TNWQRKIGEILVLVAARIKNTF mus.musculus\n [9]   941 MNKKKKPFLGMPAPLGYVPGLGR...ENWQKKIGEILVLVAAKIKNAF ornithorhynchus.a...\n[10]   941 MNKKKKPFLGMPAPLGYVPGLGR...ANWQKKIGDILRLVAGRIKNTF pan.troglodytes\n[11]   964 MTLQNYYYYYYYYFFFFETKSCS...ANWQKKIGDILRLVAGRIKNTF pongo.abelii\n[12]   972 MAASVSAGSGAGPSGSGNPTGTS...KNWQQKIGEILVLVAAQIKNAF xenopus.tropicalis\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   947 MSGFSPELIEYLEGKISFEEFER...RGGELAGSDRWCCLSFSEEQKP anolis.carolinensis\n [2]   771 SRLPRELRGLMGEANLCYARGDH...LIYRKSGNIDLANQTIHKYCVV ciona.savignyi\n [3]   918 MSELNDYLEGKITFEEFEKRREE...LIYQSSGNKDMARHIIYTYCTI danio.rerio\n [4]   927 MSGFSPELIDYLEGKISFEEFER...LIYHSSGNTRMAQKMLYTYAVV gallus.gallus\n [5]   944 MSGFSSELIDYLEGRITFEEFDQ...LIYQASGNMGMAHQLINTHCII gasterosteus.acul...\n ...   ... ...\n [8]   882 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTAMAQKLLYTYCVI mus.musculus\n [9]   899 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLGLARRLLYTWGSV ornithorhynchus.a...\n[10]   884 MSGFSPELIDYLEGKISSSSSNG...LIYQSSGNTGMAQTLLYTYCSI pan.troglodytes\n[11]   885 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQRLLYTYCSI pongo.abelii\n[12]   880 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLEMARRLLHQYCVS xenopus.tropicalis\n\n# Check number of genes\nlength(busco_genes)\n\n[1] 282\n\n\nAs you can see, we found 282 BUSCO genes shared by all 12 species in our data set. These 282 genes represent our marker gene set for phylogeny inference.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#multiple-sequence-alignment",
    "href": "chapters/phylogenomics.html#multiple-sequence-alignment",
    "title": "1  Phylogenomics",
    "section": "1.4 Multiple sequence alignment",
    "text": "1.4 Multiple sequence alignment\nOnce we have our marker genes, we can perform a multiple sequence alignment (MSA) and use the MSA to infer a phylogeny.\n\n# Perform MSA for each BUSCO gene with MUSCLE\nmsas &lt;- lapply(busco_genes, msa, method = \"Muscle\")\n\n# Convert MSAs to `AAStringSet` class\nmsas_aa &lt;- lapply(msas, as, \"AAStringSet\")\n\nLet’s take a look at the first few MSAs to see what they look like.\n\n# Take a look at the MSAs for the first 3 genes\nhead(msas_aa, 3)\n\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1123 MSISLDKDAFFRRLKKIYSTWES...-------------------RRR ciona.savignyi\n [2]  1123 -----------------------...WGQWG----------------- gallus.gallus\n [3]  1123 MAVTLDKEAYYRRIKRFYGNWK-...-----------PAPNPSKKRKK xenopus.tropicalis\n [4]  1123 MALSLDREAYYRRIKRLYSNWQ-...HHRSSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [5]  1123 MAVTLDKDAYYRRVKRLYSNWR-...R---GSNRGSRHSSAPPKKKRK homo.sapiens\n ...   ... ...\n [8]  1123 MAVTLDKDAYYRRVKRLYSNWR-...R---GSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1123 MAVTLDKEAYYRRVKRLYSNWR-...R---GSSRGSRHSSAPPKKKRK monodelphis.domes...\n[10]  1123 MAVTLDKEAYYRRVKRLYSNWR-...R---GSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[11]  1123 MAVSLDKDAFYRRIKRLYGNWK-...-------RSSAPPPRSKKKRRH danio.rerio\n[12]  1123 MAVNLDKEAYYRRIKRFYGNWK-...---------------------- gasterosteus.acul...\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1062 -----------------------...LLPII--SSKVPVAF------- ciona.savignyi\n [2]  1062 -----MASTGIKQGPKLVSKSSA...TVSRTSRSAVSRSVFPLKSITV gasterosteus.acul...\n [3]  1062 -----MASSAAKQPPKNASKAPS...ILVLV--ASKIKNSF------- danio.rerio\n [4]  1062 -------MAASVSAGSGAGPSGS...ILVLV--AAQIKNAF------- xenopus.tropicalis\n [5]  1062 MTLQNYYYYYYYYFFFFETKSCS...ILRLV--AGRIKNTF------- pongo.abelii\n ...   ... ...\n [8]  1062 -----------------------...ILVLV--AARIKNTF------- mus.musculus\n [9]  1062 -----------------------...ILVLV--AAKLKNTF------- gallus.gallus\n[10]  1062 -----MAAAAASSSASGASSSSS...ILVLV--AAKIKNTF------- anolis.carolinensis\n[11]  1062 -----------------------...IYII------------------ monodelphis.domes...\n[12]  1062 -----------------------...ILVLV--AAKIKNAF------- ornithorhynchus.a...\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1050 -----------------------...LANQTI--HKYCVV-------- ciona.savignyi\n [2]  1050 MSGFSSELIDYLEGRITFEEFDQ...MAHQLI--NTHCII-------- gasterosteus.acul...\n [3]  1050 ----MSELNDYLEGKITFEEFEK...MARHII--YTYCTI-------- danio.rerio\n [4]  1050 MSGFSPELIDYLEGKISFEEFER...MARRLL--HQYCVS-------- xenopus.tropicalis\n [5]  1050 MSGFSPELIDYLEGKISFEEFER...LARRLL--YTWGSV-------- ornithorhynchus.a...\n ...   ... ...\n [8]  1050 MSGFSPELIDYLEGKISFEEFER...MARKLL--YTYGTI-------- monodelphis.domes...\n [9]  1050 MSGFSPELIDYLEGKISFEEFER...MAQKLL--YTYCVI-------- mus.musculus\n[10]  1050 MSGFSPELIDYLEGKIS----SS...MAQTLL--YTYCSI-------- pan.troglodytes\n[11]  1050 MSGFSPELIDYLEGKISFEEFER...MAQTLL--YTYCSI-------- homo.sapiens\n[12]  1050 MSGFSPELIDYLEGKISFEEFER...MAQRLL--YTYCSI-------- pongo.abelii\n\n\nYou can also use the function msaPrettyPrint() from the ggmsa package to visualize the MSA. This function will create a PDF in your working environment with a publication-ready figure (often with multiple pages, as MSAs are typically long) displaying your MSA\nI guess you can see that some alignments have columns with a lot of gaps. Since these are usually not much informative for phylogeny inference, it is common practice to remove MSA columns with too many gaps. This process is called ‘trimming’. Here, we will the helper function trim_alignment() (source code in file utils.R) to remove alignment columns with &gt;50% of gaps.\n\n# Trim MSAs with remove columns with &gt;50% of gaps\ntrimmed_msas &lt;- lapply(msas_aa, trim_alignment, max_gap = 0.5)\n\n# Take a look at trimmed MSAs\nhead(trimmed_msas, 3)\n\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1047 MSISLDKDAFFRRLKKIYSTWEN...-------------------RRR ciona.savignyi\n [2]  1047 -----------------------...WGCWG----------------- gallus.gallus\n [3]  1047 MAVTLDKEAYYRRIKRFYGNWKK...-----------PAPNPSKKRKK xenopus.tropicalis\n [4]  1047 MALSLDREAYYRRIKRLYSNWQK...SSGHSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [5]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK homo.sapiens\n ...   ... ...\n [8]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSSRGSRHSSAPPKKKRK monodelphis.domes...\n[10]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[11]  1047 MAVSLDKDAFYRRIKRLYGNWKK...-------RSSAPPPRSKKKRRH danio.rerio\n[12]  1047 MAVNLDKEAYYRRIKRFYGNWKK...---------------------- gasterosteus.acul...\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   941 -----------------------...KNWKLKTKELLPIISSKVPVAF ciona.savignyi\n [2]   941 MGKKKKPFLGMPAPLGYVPGLGR...NTWRTWSCETVSRTSAVSRSVF gasterosteus.acul...\n [3]   941 LNKKKKPFLGMPAPLGYVPGLGR...LNWQKNIGEILVLVASKIKNSF danio.rerio\n [4]   941 MNKKKKPFLGMPAPLGYVPGLGR...KNWQQKIGEILVLVAAQIKNAF xenopus.tropicalis\n [5]   941 --QWRDLIIQTPGVL----GVSC...ANWQKKIGDILRLVAGRIKNTF pongo.abelii\n ...   ... ...\n [8]   941 MNKKKKPFLGMPAPLGYVPGLGR...TNWQRKIGEILVLVAARIKNTF mus.musculus\n [9]   941 MNKKKKPFLGMPAPLGYVPGLGR...VNWQKKIGEILVLVAAKLKNTF gallus.gallus\n[10]   941 MNRKKKPFLGMPAPLGYVPGLGR...NNWQSKIGEILVLVAAKIKNTF anolis.carolinensis\n[11]   941 MNKKKKPFLGMPAPLGYVPGLGR...---KEQVSNIYII--------- monodelphis.domes...\n[12]   941 MNKKKKPFLGMPAPLGYVPGLGR...ENWQKKIGEILVLVAAKIKNAF ornithorhynchus.a...\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   902 -----------------------...LIYRKSGNIDLANQTIHKYCVV ciona.savignyi\n [2]   902 MSGFSSELIDYLEGRITFEEFDQ...LIYQASGNMGMAHQLINTHCII gasterosteus.acul...\n [3]   902 ----MSELNDYLEGKITFEEFEK...LIYQSSGNKDMARHIIYTYCTI danio.rerio\n [4]   902 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLEMARRLLHQYCVS xenopus.tropicalis\n [5]   902 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLGLARRLLYTWGSV ornithorhynchus.a...\n ...   ... ...\n [8]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNMGMARKLLYTYGTI monodelphis.domes...\n [9]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTAMAQKLLYTYCVI mus.musculus\n[10]   902 MSGFSPELIDYLEGKIS----SS...LIYQSSGNTGMAQTLLYTYCSI pan.troglodytes\n[11]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQTLLYTYCSI homo.sapiens\n[12]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQRLLYTYCSI pongo.abelii\n\n\nNow that we have trimmed MSAs, we can use them to infer a phylogeny.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#phylogeny-inference-concatenation-based-approaches",
    "href": "chapters/phylogenomics.html#phylogeny-inference-concatenation-based-approaches",
    "title": "1  Phylogenomics",
    "section": "1.5 Phylogeny inference: concatenation-based approaches",
    "text": "1.5 Phylogeny inference: concatenation-based approaches\nThe simplest way of inferring a phylogeny from phylogenomic (i.e. multi-gene) data sets is to concatenate MSAs for each gene into a single MSA, and then infer a phylogeny as you’d do for a single MSA. This concatenated MSA is often referred to as a ‘supermatrix’, which is why this approach is usually called ‘supermatrix-based’, or ‘concatenation-based’.\nTo demonstrate how this works, we will concatenate MSAs and infer a species tree using IQ-TREE 2 (Minh et al. 2020). For that, we will use a helper function infer_species_tree() (source code in utils.R), which runs IQ-TREE 2 from the R session and reads the inferred tree as an object of class phylo (standard class to represent trees in R, from the ape package).\n\n# Concatenate alignments\nconc_msa &lt;- Reduce(xscat, trimmed_msas)\nnames(conc_msa) &lt;- names(trimmed_msas[[1]])\n\n# Take a look at the concatenated alignment\nhead(conc_msa)\n\n# Infer species tree from concatenated alignment\noutgroup &lt;- \"ciona.savignyi\"\ntree_conc &lt;- infer_species_tree(\n    list(conc = conc_msa),\n    outgroup, \n    threads = 4\n)\n\nThe tree inferred from the concatenated alignment is stored in output/trees/supermatrix.treefile, and the output file with a detailed summary (models and AICs/BICs, base frequencies, etc) is stored in output/trees/supermatrix.iqtree. To load a phylogenetic tree from a file, you can use the function read.tree() from the R package ape.\n\n# Read tree as a `phylo` object\ntree_conc &lt;- read.tree(here(\"output\", \"trees\", \"supermatrix.treefile\"))\n\n# Plot tree\nplot(tree_conc, show.node.label = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#phylogeny-inference-coalescent-based-approaches",
    "href": "chapters/phylogenomics.html#phylogeny-inference-coalescent-based-approaches",
    "title": "1  Phylogenomics",
    "section": "1.6 Phylogeny inference: coalescent-based approaches",
    "text": "1.6 Phylogeny inference: coalescent-based approaches\nHere, instead of inferring a single tree from concatenated MSAs, we will infer an individual tree for each BUSCO gene. We will then use these set of trees to calculate concordance factors and use coalescent-based approaches.\n\n# Infer single-locus trees\noutgroup &lt;- \"ciona.savignyi\"\ntree_sl &lt;- infer_singlelocus_trees(\n    trimmed_msas,\n    outgroup,\n    outdir = here(\"output\", \"sl_trees\"),\n    threads = 4\n)\n\nNow, we will read the output tree file. Since this is not one, but many trees, trees will be stored in an object of class multiPhylo. In essence, a multiPhylo object is a list of multiple phylo objects.\n\n# Read tree\ntree_sl &lt;- read.tree(here(\"output\", \"sl_trees\", \"sl.treefile\"))\n\ntree_sl\n\n282 phylogenetic trees\n\n\nNext, we will infer a species tree from this set of gene trees using ASTRAL (Zhang, Sayyari, and Mirarab 2017), a Java program that can be run on the command line using the following code:\n\njava -jar astral.5.7.8.jar -i sl.treefile -o astral.tree\n\nThen, we can read the species tree created by ASTRAL. Note that ASTRAL is a coalescent-based method that uses parsimony principles to infer a single species tree from a set of (many) gene trees.\n\n# Read species tree created with ASTRAL\nastral_tree &lt;- read.tree(here(\"output\", \"sl_trees\", \"astral.tree\"))\n\n# Plot tree\nplot(astral_tree, show.node.label = TRUE)\n\n\n\n\n\n\n\n\nFinally, once we have a representative species tree (generated by ASTRAL) and multiple gene trees (generated by IQ-TREE 2), we can calculate so-called gene concordance factors (gCF), which represent the proportion of decisive gene trees that support each branch of the species tree. These can be computed with the code below\n\n# Calculate gCF with IQ-TREE 2\nargs &lt;- c(\n    \"-t\", here(\"output\", \"sl_trees\", \"astral.tree\"),\n    \"--gcf\", here(\"output\", \"sl_trees\", \"sl.treefile\"),\n    \"--prefix\", here(\"output\", \"sl_trees\", \"gcf\")\n)\n\nsystem2(\"iqtree2\", args)\n\nThen, we can read the tree and explore the tree with gCF for each branch with:\n\n# Read tree with gCF\ngcf_tree &lt;- read.tree(here(\"output\", \"sl_trees\", \"gcf.cf.tree\"))\n\nplot(gcf_tree, show.node.label = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#session-information",
    "href": "chapters/phylogenomics.html#session-information",
    "title": "1  Phylogenomics",
    "section": "Session information",
    "text": "Session information\nThis document was created under the following conditions:\n\nsessionInfo()\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=nl_BE.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=nl_BE.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=nl_BE.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=nl_BE.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Arctic/Longyearbyen\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] msa_1.36.1          ape_5.8             lubridate_1.9.3    \n [4] forcats_1.0.0       stringr_1.5.1       dplyr_1.1.4        \n [7] purrr_1.0.2         readr_2.1.5         tidyr_1.3.1        \n[10] tibble_3.2.1        ggplot2_3.5.1       tidyverse_2.0.0    \n[13] Biostrings_2.72.1   GenomeInfoDb_1.40.1 XVector_0.44.0     \n[16] IRanges_2.38.1      S4Vectors_0.42.1    BiocGenerics_0.50.0\n[19] cogeqc_1.8.0        here_1.0.1         \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1        farver_2.1.2            vipor_0.4.7            \n [4] fastmap_1.2.0           lazyeval_0.2.2          promises_1.3.0         \n [7] digest_0.6.36           timechange_0.3.0        lifecycle_1.0.4        \n[10] processx_3.8.4          tidytree_0.4.6          magrittr_2.0.3         \n[13] compiler_4.4.1          rlang_1.1.4             tools_4.4.1            \n[16] igraph_2.0.3            utf8_1.2.4              yaml_2.3.9             \n[19] knitr_1.48              labeling_0.4.3          htmlwidgets_1.6.4      \n[22] bit_4.0.5               curl_5.2.1              xml2_1.3.6             \n[25] plyr_1.8.9              websocket_1.4.2         aplot_0.2.3            \n[28] withr_3.0.0             grid_4.4.1              fansi_1.0.6            \n[31] colorspace_2.1-0        scales_1.3.0            cli_3.6.3              \n[34] rmarkdown_2.27          crayon_1.5.3            treeio_1.28.0          \n[37] generics_0.1.3          rstudioapi_0.16.0       ggtree_3.12.0          \n[40] httr_1.4.7              reshape2_1.4.4          tzdb_0.4.0             \n[43] chromote_0.3.1          ggbeeswarm_0.7.2        cachem_1.1.0           \n[46] zlibbioc_1.50.0         rvest_1.0.4             parallel_4.4.1         \n[49] ggplotify_0.1.2         BiocManager_1.30.23     yulab.utils_0.1.4      \n[52] vctrs_0.6.5             jsonlite_1.8.8          gridGraphics_0.5-1     \n[55] hms_1.1.3               patchwork_1.2.0         bit64_4.0.5            \n[58] beeswarm_0.4.0          glue_1.7.0              ps_1.7.7               \n[61] stringi_1.8.4           gtable_0.3.5            later_1.3.2            \n[64] UCSC.utils_1.0.0        munsell_0.5.1           pillar_1.9.0           \n[67] htmltools_0.5.8.1       GenomeInfoDbData_1.2.12 R6_2.5.1               \n[70] rprojroot_2.0.4         vroom_1.6.5             evaluate_0.24.0        \n[73] lattice_0.22-6          BiocStyle_2.32.1        memoise_2.0.1          \n[76] ggfun_0.1.5             Rcpp_1.0.13             nlme_3.1-165           \n[79] xfun_0.46               fs_1.6.4                pkgconfig_2.0.3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/phylogenomics.html#references",
    "href": "chapters/phylogenomics.html#references",
    "title": "1  Phylogenomics",
    "section": "References",
    "text": "References\n\n\n\n\nHarrison, Peter W, M Ridwan Amode, Olanrewaju Austine-Orimoloye, Andrey G Azov, Matthieu Barba, If Barnes, Arne Becker, et al. 2024. “Ensembl 2024.” Nucleic Acids Research 52 (D1): D891–99.\n\n\nMinh, Bui Quang, Heiko A Schmidt, Olga Chernomor, Dominik Schrempf, Michael D Woodhams, Arndt Von Haeseler, and Robert Lanfear. 2020. “IQ-TREE 2: New Models and Efficient Methods for Phylogenetic Inference in the Genomic Era.” Molecular Biology and Evolution 37 (5): 1530–34.\n\n\nZhang, Chao, Erfan Sayyari, and Siavash Mirarab. 2017. “ASTRAL-III: Increased Scalability and Impacts of Contracting Low Support Branches.” In RECOMB International Workshop on Comparative Genomics, 53–75. Springer.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Phylogenomics</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html",
    "href": "chapters/gene_set_enrichment.html",
    "title": "2  Gene set enrichment analyses",
    "section": "",
    "text": "2.1 Goals of this lesson\nGene set enrichment analyses are commonly used to identify overrepresented terms (mostly functional categories, but also sequence motifs and other sets) among a particular set of terms. For instance, researchers typically want to find if a list of differentially expressed genes (DEGs) is overrepresented in genes related to a specific pathway. To do that, we use statistical methods to calculate the probability of finding the frequency of terms we found by chance (under the null hypothesis). Although simple, (correctly) performing enrichment analyses requires special attention to avoid common mistakes and pitfalls.\nIn this lesson, you will learn to:\nWe will start by loading the required packages.\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SummarizedExperiment)\nlibrary(DESeq2)\nlibrary(clusterProfiler)\nlibrary(enrichplot)\nlibrary(org.Mm.eg.db)\nlibrary(universalmotif)\n\nset.seed(123) # for reproducibility",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html#goals-of-this-lesson",
    "href": "chapters/gene_set_enrichment.html#goals-of-this-lesson",
    "title": "2  Gene set enrichment analyses",
    "section": "",
    "text": "perform enrichment analyses for functional terms among differentially expressed genes;\nperform enrichment analyses for sequence motifs among a set of promoter sequences.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html#enrichment-for-functional-terms",
    "href": "chapters/gene_set_enrichment.html#enrichment-for-functional-terms",
    "title": "2  Gene set enrichment analyses",
    "section": "2.2 Enrichment for functional terms",
    "text": "2.2 Enrichment for functional terms\nTo start, we will load an RNA-seq data set stored as a SummarizedExperiment object in data/GSE96870_se.rds. Data were obtained from Blackmore et al. (2017) and modified to keep only a subset of the samples. In this experiment, researchers were trying to investigate how gene expression changes in male and female mice 4 and 8 days after infection with Influenza A. Samples were extracted from spinal cord and cerebellum tissues, but here we will only cerebellum samples only.\nLet’s load the SummarizedExperiment object and take a look at it.\n\n# Load data\nse &lt;- readRDS(here(\"data\", \"GSE96870_se.rds\"))\n\n# Inspect data\n## Entire object\nse\n\nclass: RangedSummarizedExperiment \ndim: 41786 22 \nmetadata(0):\nassays(1): counts\nrownames(41786): Xkr4 LOC105243853 ... TrnT TrnP\nrowData names(3): ENTREZID product gbkey\ncolnames(22): GSM2545337 GSM2545338 ... GSM2545346 GSM2545347\ncolData names(12): title geo_accession ... Label Group\n\n## Count matrix\nassay(se) |&gt; head()\n\n             GSM2545337 GSM2545338 GSM2545348 GSM2545353 GSM2545343 GSM2545349\nXkr4               2410       2159       2275       1910       2235       1881\nLOC105243853          0          1          1          0          3          0\nLOC105242387        121        110        161        214        130        154\nLOC105242467          5          5          2          1          2          4\nRp1                   2          0          3          1          1          6\nSox17               239        218        302        322        296        286\n             GSM2545354 GSM2545339 GSM2545344 GSM2545352 GSM2545362 GSM2545340\nXkr4               1771       1980       1779       1890       2315       1977\nLOC105243853          0          4          3          1          1          0\nLOC105242387        124        120        131        272        189        172\nLOC105242467          4          5          2          3          2          2\nRp1                   3          3          1          5          3          2\nSox17               273        220        233        267        197        261\n             GSM2545345 GSM2545350 GSM2545363 GSM2545336 GSM2545342 GSM2545351\nXkr4               1528       2584       1645       1891       1757       1837\nLOC105243853          0          0          0          0          1          1\nLOC105242387        160        124        223        204        177        221\nLOC105242467          2          7          1         12          3          1\nRp1                   2          5          1          2          3          3\nSox17               271        325        310        251        179        201\n             GSM2545380 GSM2545341 GSM2545346 GSM2545347\nXkr4               1723       1945       1644       1585\nLOC105243853          1          0          1          3\nLOC105242387        251        173        180        176\nLOC105242467          4          6          1          2\nRp1                   0          1          2          2\nSox17               246        232        205        230\n\n## Sample metadata\ncolData(se)\n\nDataFrame with 22 rows and 12 columns\n                     title geo_accession     organism         age         sex\n               &lt;character&gt;   &lt;character&gt;  &lt;character&gt; &lt;character&gt; &lt;character&gt;\nGSM2545337 CNS_RNA-seq_11C    GSM2545337 Mus musculus     8 weeks      Female\nGSM2545338 CNS_RNA-seq_12C    GSM2545338 Mus musculus     8 weeks      Female\nGSM2545348 CNS_RNA-seq_27C    GSM2545348 Mus musculus     8 weeks      Female\nGSM2545353  CNS_RNA-seq_3C    GSM2545353 Mus musculus     8 weeks      Female\nGSM2545343 CNS_RNA-seq_20C    GSM2545343 Mus musculus     8 weeks        Male\n...                    ...           ...          ...         ...         ...\nGSM2545351  CNS_RNA-seq_2C    GSM2545351 Mus musculus     8 weeks      Female\nGSM2545380  CNS_RNA-seq_9C    GSM2545380 Mus musculus     8 weeks      Female\nGSM2545341 CNS_RNA-seq_17C    GSM2545341 Mus musculus     8 weeks        Male\nGSM2545346 CNS_RNA-seq_25C    GSM2545346 Mus musculus     8 weeks        Male\nGSM2545347 CNS_RNA-seq_26C    GSM2545347 Mus musculus     8 weeks        Male\n             infection      strain        time      tissue     mouse\n           &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;integer&gt;\nGSM2545337 NonInfected     C57BL/6        Day0  Cerebellum         9\nGSM2545338 NonInfected     C57BL/6        Day0  Cerebellum        10\nGSM2545348 NonInfected     C57BL/6        Day0  Cerebellum         8\nGSM2545353 NonInfected     C57BL/6        Day0  Cerebellum         4\nGSM2545343 NonInfected     C57BL/6        Day0  Cerebellum        11\n...                ...         ...         ...         ...       ...\nGSM2545351  InfluenzaA     C57BL/6        Day8  Cerebellum        16\nGSM2545380  InfluenzaA     C57BL/6        Day8  Cerebellum        19\nGSM2545341  InfluenzaA     C57BL/6        Day8  Cerebellum         6\nGSM2545346  InfluenzaA     C57BL/6        Day8  Cerebellum        23\nGSM2545347  InfluenzaA     C57BL/6        Day8  Cerebellum        24\n                    Label       Group\n                 &lt;factor&gt;    &lt;factor&gt;\nGSM2545337 Female_Day0_9  Female_Day0\nGSM2545338 Female_Day0_10 Female_Day0\nGSM2545348 Female_Day0_8  Female_Day0\nGSM2545353 Female_Day0_4  Female_Day0\nGSM2545343 Male_Day0_11   Male_Day0  \n...                   ...         ...\nGSM2545351 Female_Day8_16 Female_Day8\nGSM2545380 Female_Day8_19 Female_Day8\nGSM2545341 Male_Day8_6    Male_Day8  \nGSM2545346 Male_Day8_23   Male_Day8  \nGSM2545347 Male_Day8_24   Male_Day8  \n\n\nNow, we will identify genes that are differentially expressed on day 8 after infection compared to day 0 (control).\n\n# Keep only protein-coding genes\nse &lt;- se[rowData(se)$gbkey == \"mRNA\"]\n\n# Get gene-wise differential expression test statistics (design: sex + time)\ndds &lt;- DESeqDataSet(se, design = ~ sex + time)\ndds &lt;- DESeq(dds)\n\n# Obtain results from the desired contrast: day 8 vs day 0\nres &lt;- results(dds, contrast = c(\"time\", \"Day8\", \"Day0\"))\n\n# Get differentially expressed genes (DEGs) in a character vector\ndeg &lt;- res |&gt;\n    as.data.frame() |&gt;\n    filter(padj &lt;0.05, abs(log2FoldChange) &gt; log2(1.5)) |&gt;\n    tibble::rownames_to_column(\"gene\") |&gt;\n    pull(gene)\n\nhead(deg)\n\n[1] \"3110035E14Rik\" \"Sgk3\"          \"Kcnb2\"         \"Sbspon\"       \n[5] \"Gsta3\"         \"Lman2l\"       \n\n\nNext, we will try find out if this set of DEGs is overrepresented in genes associated with a particular Gene Ontology (GO) term. For that, we will GO annotation in the OrgDb package for mouse. Bioconductor provides so-called OrgDb packages with annotation data for a bunch of model organisms, and many packages (including clusterProfiler, which we will use to perform overrepresentation analysis) can use OrgDb packages to easily and automatically retrieve data.\n\n# Perform ORA for GO terms\nora_go &lt;- enrichGO(\n    gene = deg, \n    keyType = \"SYMBOL\",\n    ont = \"BP\", \n    OrgDb = org.Mm.eg.db\n)\n\n# Explore results as a data frame\nas.data.frame(ora_go) |&gt; head()\n\n                   ID                Description GeneRatio   BgRatio\nGO:0050900 GO:0050900        leukocyte migration    51/968 402/28905\nGO:0006935 GO:0006935                 chemotaxis    52/968 465/28905\nGO:0042330 GO:0042330                      taxis    52/968 467/28905\nGO:0030595 GO:0030595       leukocyte chemotaxis    36/968 242/28905\nGO:0071674 GO:0071674 mononuclear cell migration    32/968 203/28905\nGO:0060326 GO:0060326            cell chemotaxis    41/968 334/28905\n                 pvalue     p.adjust       qvalue\nGO:0050900 3.536123e-16 1.795643e-12 1.304643e-12\nGO:0006935 3.336947e-14 6.712316e-11 4.876903e-11\nGO:0042330 3.965528e-14 6.712316e-11 4.876903e-11\nGO:0030595 6.591196e-14 8.367524e-11 6.079511e-11\nGO:0071674 3.208410e-13 3.258461e-10 2.367469e-10\nGO:0060326 8.641191e-13 7.313328e-10 5.313575e-10\n                                                                                                                                                                                                                                                                                                               geneID\nGO:0050900              Tnfsf18/Sell/Slamf9/Fut7/Itga4/Mdk/Grem1/Ada/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Ascl2/Calr/Ccl17/Enpp1/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Aoc3/Itgb3/Ccl28/Lgals3/Ptk2b/Emp2/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Il33/Ch25h\nGO:0006935 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Ntf3/Trpm4/Hsd3b7/Itgam/Adam8/Lsp1/Calr/Ccl17/Robo3/Cmtm7/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Tubb2b/Ccl28/Lgals3/Cmtm5/Ptk2b/Nr4a1/Casr/Retnlg/Fpr2/Dusp1/Ager/Stx3/Ch25h/Plxnb3/Nox1\nGO:0042330 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Ntf3/Trpm4/Hsd3b7/Itgam/Adam8/Lsp1/Calr/Ccl17/Robo3/Cmtm7/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Tubb2b/Ccl28/Lgals3/Cmtm5/Ptk2b/Nr4a1/Casr/Retnlg/Fpr2/Dusp1/Ager/Stx3/Ch25h/Plxnb3/Nox1\nGO:0030595                                                                                              Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Lgals3/Ptk2b/Retnlg/Fpr2/Dusp1/Ch25h\nGO:0071674                                                                                                                      Tnfsf18/Slamf9/Fut7/Itga4/Mdk/Grem1/Il12a/Nbl1/Padi2/Alox5/Trpm4/Hsd3b7/Adam8/Ascl2/Calr/Ccl17/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Lgals3/Ptk2b/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Ch25h\nGO:0060326                                                                Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Ccl28/Lgals3/Ptk2b/Nr4a1/Retnlg/Fpr2/Dusp1/Ch25h/Plxnb3/Nox1\n           Count\nGO:0050900    51\nGO:0006935    52\nGO:0042330    52\nGO:0030595    36\nGO:0071674    32\nGO:0060326    41\n\n\n\n\n\n\n\n\nOverrepresentation analyses with non-model organisms\n\n\n\nIf you’re working with a non-model organism for which an OrgDb package is not available, you can create a 2-column data frame with functional annotation in the first column and gene IDs in the second column. Then, you can pass this annotation data frame to the enricher() function in clusterProfiler, which is more flexible and does not expect OrgDb objects as input.\n\n\nAs you can see, the enrichGO() function returned GO terms that are significantly overrepresented in our set of DEGs. However, there is an important issue with the way we performed the enrichment analysis: enrichGO() used all genes in the mouse genome as background (or ‘universe’). This does not make sense, because we didn’t use all genes for our differential expression analysis (e.g., we removed non-protein-coding genes). Choosing the right universe is very important, because a larger universe leads to more false positives (see an example here).\nNow, let’s perform the enrichment analysis again, but this time restricting our universe to only those genes in the expression matrix.\n\n# Perform ORA for GO terms with restricted universe\nora_go2 &lt;- enrichGO(\n    gene = deg, \n    keyType = \"SYMBOL\",\n    ont = \"BP\", \n    universe = rownames(se),\n    OrgDb = org.Mm.eg.db\n)\n\n# Explore results as a data frame\nas.data.frame(ora_go2) |&gt; head()\n\n                   ID\nGO:0050900 GO:0050900\nGO:0071674 GO:0071674\nGO:0030595 GO:0030595\nGO:0002523 GO:0002523\nGO:0035456 GO:0035456\nGO:0002460 GO:0002460\n                                                                                                                         Description\nGO:0050900                                                                                                       leukocyte migration\nGO:0071674                                                                                                mononuclear cell migration\nGO:0030595                                                                                                      leukocyte chemotaxis\nGO:0002523                                                                     leukocyte migration involved in inflammatory response\nGO:0035456                                                                                               response to interferon-beta\nGO:0002460 adaptive immune response based on somatic recombination of immune receptors built from immunoglobulin superfamily domains\n           GeneRatio   BgRatio       pvalue     p.adjust       qvalue\nGO:0050900    51/968 372/16569 1.116320e-08 3.694287e-05 3.332087e-05\nGO:0071674    32/968 180/16569 1.468901e-08 3.694287e-05 3.332087e-05\nGO:0030595    36/968 222/16569 2.301099e-08 3.858177e-05 3.479908e-05\nGO:0002523    11/968  25/16569 5.344683e-08 5.632460e-05 5.080235e-05\nGO:0035456    16/968  55/16569 5.598867e-08 5.632460e-05 5.080235e-05\nGO:0002460    44/968 320/16569 1.044964e-07 8.760284e-05 7.901396e-05\n                                                                                                                                                                                                                                                                                                  geneID\nGO:0050900 Tnfsf18/Sell/Slamf9/Fut7/Itga4/Mdk/Grem1/Ada/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Ascl2/Calr/Ccl17/Enpp1/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Aoc3/Itgb3/Ccl28/Lgals3/Ptk2b/Emp2/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Il33/Ch25h\nGO:0071674                                                                                                         Tnfsf18/Slamf9/Fut7/Itga4/Mdk/Grem1/Il12a/Nbl1/Padi2/Alox5/Trpm4/Hsd3b7/Adam8/Ascl2/Calr/Ccl17/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Lgals3/Ptk2b/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Ch25h\nGO:0030595                                                                                 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Lgals3/Ptk2b/Retnlg/Fpr2/Dusp1/Ch25h\nGO:0002523                                                                                                                                                                                                                                   Fut7/Mdk/S100a8/S100a9/Ppbp/Ptn/Alox5/Itgam/Adam8/Ccl2/Aoc3\nGO:0035456                                                                                                                                                                                        Aim2/Ifi204/Gbp6/Oas1c/Ifitm6/Bst2/Irgm1/Tgtp1/Tgtp2/Ifi47/Igtp/Irgm2/Ifitm7/F830016B08Rik/Iigp1/Ifit1\nGO:0002460                              Il18rap/Pla2g4a/Tnfsf18/Fcgr4/Cd46/Fut7/C8g/Ada/Il12a/Rorc/Masp2/Fosl2/Pf4/Clec7a/Pirb/Trpm4/Irf7/Ascl2/Tnfsf13b/Il12rb1/Parp3/Enpp1/Aire/Icosl/Ccr7/Gzmb/Csf2rb/Il2rb/Tnfrsf13c/Emp2/Klhl6/Tfrc/H2-K1/Tap2/Ager/C4b/H2-Q1/H2-Q2/H2-Q6/H2-T23/Cd70/C3/Cd274/Il33\n           Count\nGO:0050900    51\nGO:0071674    32\nGO:0030595    36\nGO:0002523    11\nGO:0035456    16\nGO:0002460    44\n\n\nFinally, you can also visually explore enrichment results as follows:\n\n# Barplot\nbarplot(ora_go2, showCategory = 20)\n\n\n\n\n\n\n\n# Dotplot\ndotplot(ora_go2, showCategory = 20)\n\n\n\n\n\n\n\n\nAlthough common, these visualization approaches are problematic because (i) they only show the top N (often 20) terms, when most of the time there are hundreds of enriched terms, and (ii) the GO database contains a lot of redundant terms, so many of the bars or dots in these plots actually represent the same thing. The best visualization technique for overrepresentation analysis is no visualization at all. Manually looking at the table and summarizing results in text is a much better thing to do.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html#enrichment-for-sequence-motifs",
    "href": "chapters/gene_set_enrichment.html#enrichment-for-sequence-motifs",
    "title": "2  Gene set enrichment analyses",
    "section": "2.3 Enrichment for sequence motifs",
    "text": "2.3 Enrichment for sequence motifs\nEnrichment analyses can also be used to find overrepresented sequence motifs among a set of sequences. For example, you may have a set of coexpressed genes and want to find out if a particular sequence motif is overrepresented in their promoter sequences (which would likely indicate transcription factor binding sites). There are many software tools for such kind of analysis, such as the MEME suite (Bailey et al. 2015) and the R/Bioconductor package universalmotif (Tremblay 2024).\nHere, we will use universalmotif to find out if an example motif (stored in the example data set ArabidopsisMotif) is significantly overrepresented in promoters of 50 genes in the genome of Arabidopsis thaliana. Let’s first load the example data and take a quick look at them.\n\n# Load example data: promoters and motifs of Arabidopsis thaliana\ndata(\"ArabidopsisMotif\")\ndata(\"ArabidopsisPromoters\")\n\n# Inspect data\nArabidopsisMotif\n\n\n       Motif name:   YTTTYTTTTTYTTTY\n         Alphabet:   DNA\n             Type:   PPM\n          Strands:   +-\n         Total IC:   15.99\n      Pseudocount:   1\n        Consensus:   YTYTYTTYTTYTTTY\n     Target sites:   617\n          E-value:   2.5e-87\n\n     Y    T    Y    T    Y    T    T    Y    T    T    Y    T    T    T    Y\nA 0.01 0.00 0.00 0.00 0.00 0.06 0.00 0.01 0.00 0.00 0.02 0.00 0.00 0.00 0.00\nC 0.30 0.17 0.31 0.01 0.54 0.02 0.24 0.25 0.22 0.04 0.39 0.21 0.16 0.18 0.43\nG 0.16 0.05 0.03 0.01 0.00 0.02 0.11 0.00 0.04 0.05 0.03 0.01 0.02 0.00 0.11\nT 0.53 0.78 0.66 0.98 0.45 0.90 0.66 0.74 0.74 0.91 0.55 0.77 0.83 0.82 0.46\n\nArabidopsisPromoters\n\nDNAStringSet object of length 50:\n     width seq                                              names               \n [1]  1000 CATACAAGTAACAGAAAAACCGA...ACACTTTTGTCCGAAAACTAAG AT4G28150\n [2]  1000 TCGCTCATAGTTCTCCTAGATCG...AAATCCCAGTATTACCAACTTC AT1G19380\n [3]  1000 AATTGAAGGCTTTTACATCTTGG...TTGAAAGTCTTCAAGCAGACGC AT4G19520\n [4]  1000 TCGTAAAGTTAAAGGGAGACGTC...TTTAATAATCACATCTCTTACC AT1G03850\n [5]  1000 TACTTTTATGGATCATCATCAGA...TGTGTAATGACGATGAAAGATG AT5G01810\n ...   ... ...\n[46]  1000 ACAGCAAAAACTGAGGTGCGAAC...CAGAGAGGACTGAGGAAATTCA AT5G22690\n[47]  1000 GAATTGTGATACTATACTAATTG...GCCGTGCCCTTCATTTTCAGAA AT1G05670\n[48]  1000 CATGCTTGGTTGGTTCTTCTTGT...AAACTTAGTGCCACTTAGACAC AT1G06160\n[49]  1000 AGTTTATTGAATTAAGTTTTTAG...TAAGGAACGTTCAAGAACCAAA AT5G24660\n[50]  1000 AGCGGTATATAAAAGTTAGTGCT...AGGATGTTGATGCATGAAAATC AT3G19200\n\n\nNow, to perform an enrichment analysis, we will use the enrich_motifs() function.\n\n# Perform motif enrichment analysis\nenrich_motifs(\n    motifs = ArabidopsisMotif, \n    sequences = ArabidopsisPromoters, \n    shuffle.k = 3,\n    threshold = 0.001, \n    RC = TRUE\n)\n\nDataFrame with 1 row and 15 columns\n            motif   motif.i motif.consensus target.hits target.seq.hits\n      &lt;character&gt; &lt;integer&gt;     &lt;character&gt;   &lt;integer&gt;       &lt;integer&gt;\n1 YTTTYTTTTTYTTTY         1 YTYTYTTYTTYTTTY         244              50\n  target.seq.count  bkg.hits bkg.seq.hits bkg.seq.count        Pval        Qval\n         &lt;integer&gt; &lt;integer&gt;    &lt;integer&gt;     &lt;integer&gt;   &lt;numeric&gt;   &lt;numeric&gt;\n1               50       135           45            50 1.23587e-08 1.23587e-08\n         Eval pct.target.seq.hits pct.bkg.seq.hits target.enrichment\n    &lt;numeric&gt;           &lt;numeric&gt;        &lt;numeric&gt;         &lt;numeric&gt;\n1 2.47174e-08                 100               90           1.11111\n\n\nIn principle, this analysis is very similar to what we’ve done for functional terms in the previous section: we are testing if input motifs are significantly overrepresented (or enriched) in a set of target sequences relative to a set of background sequences. Like in functional enrichment analyses, it’s important to carefully choose a suitable background (or universe). For instance, if you want to find overrepresented motifs in a set of coexpressed genes, you might want to use as background only promoters of expressed genes. When a background is not explicitly given, enrich_motifs() shuffles the input sequences to create a background.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html#session-information",
    "href": "chapters/gene_set_enrichment.html#session-information",
    "title": "2  Gene set enrichment analyses",
    "section": "Session information",
    "text": "Session information\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2025-03-12\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n abind                  1.4-5    2016-07-21 [1] CRAN (R 4.4.1)\n AnnotationDbi        * 1.66.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n ape                    5.8      2024-04-11 [1] CRAN (R 4.4.1)\n aplot                  0.2.3    2024-06-17 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23  2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1   2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1   2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5    2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4    2023-03-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0    2024-05-16 [1] CRAN (R 4.4.1)\n cli                    3.6.3    2024-06-21 [1] CRAN (R 4.4.1)\n clusterProfiler      * 4.12.1   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n codetools              0.2-20   2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0    2023-01-23 [1] CRAN (R 4.4.1)\n cowplot                1.1.3    2024-01-22 [1] CRAN (R 4.4.1)\n crayon                 1.5.3    2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4   2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3    2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1   2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DESeq2               * 1.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36   2024-06-23 [1] CRAN (R 4.4.1)\n DOSE                   3.30.2   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n dplyr                * 1.1.4    2023-11-17 [1] CRAN (R 4.4.1)\n enrichplot           * 1.24.2   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0   2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6    2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2    2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0    2024-05-15 [1] CRAN (R 4.4.1)\n fastmatch              1.1-4    2023-08-18 [1] CRAN (R 4.4.1)\n fgsea                  1.30.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n forcats              * 1.0.0    2023-01-29 [1] CRAN (R 4.4.1)\n fs                     1.6.4    2024-04-25 [1] CRAN (R 4.4.1)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12   2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1   2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggforce                0.4.2    2024-02-19 [1] CRAN (R 4.4.1)\n ggfun                  0.1.5    2024-05-28 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1    2024-04-23 [1] CRAN (R 4.4.1)\n ggplotify              0.1.2    2023-08-09 [1] CRAN (R 4.4.1)\n ggraph                 2.2.1    2024-03-07 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5    2024-01-10 [1] CRAN (R 4.4.1)\n ggtree                 3.12.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n glue                   1.7.0    2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1   2024-07-24 [1] Bioconductor\n GOSemSim               2.30.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n graphlayouts           1.1.1    2024-03-09 [1] CRAN (R 4.4.1)\n gridExtra              2.3      2017-09-09 [1] CRAN (R 4.4.1)\n gridGraphics           0.5-1    2020-12-13 [1] CRAN (R 4.4.1)\n gson                   0.1.0    2023-03-07 [1] CRAN (R 4.4.1)\n gtable                 0.3.5    2024-04-22 [1] CRAN (R 4.4.1)\n HDO.db                 0.99.1   2024-07-24 [1] Bioconductor\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3    2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1  2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4    2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7    2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3    2024-03-13 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8    2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1   2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48     2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3    2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6   2024-03-20 [1] CRAN (R 4.4.1)\n lazyeval               0.2.2    2019-03-15 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4    2023-11-07 [1] CRAN (R 4.4.1)\n locfit                 1.5-9.10 2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3    2023-09-27 [1] CRAN (R 4.4.1)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61   2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0    2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0    2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1    2021-11-26 [1] CRAN (R 4.4.1)\n munsell                0.5.1    2024-04-01 [1] CRAN (R 4.4.1)\n nlme                   3.1-165  2024-06-06 [1] CRAN (R 4.4.1)\n org.Mm.eg.db         * 3.19.1   2024-09-02 [1] Bioconductor\n patchwork              1.2.0    2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0    2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9    2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.4.1)\n polyclip               1.10-7   2024-07-23 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2    2023-08-10 [1] CRAN (R 4.4.1)\n qvalue                 2.36.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3    2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13   2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5    2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4    2020-04-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4    2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27     2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4    2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7    2024-05-27 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0   2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1    2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0    2023-11-28 [1] CRAN (R 4.4.1)\n scatterpie             0.2.3    2024-06-05 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.4.1)\n shadowtext             0.1.4    2024-07-18 [1] CRAN (R 4.4.1)\n SparseArray            1.4.8    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n stringi                1.8.4    2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1    2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1    2023-03-20 [1] CRAN (R 4.4.1)\n tidygraph              1.3.1    2024-01-30 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1    2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1    2024-03-11 [1] CRAN (R 4.4.1)\n tidytree               0.4.6    2023-12-12 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0    2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0    2024-01-18 [1] CRAN (R 4.4.1)\n treeio                 1.28.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n tweenr                 2.0.3    2024-02-26 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0    2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n universalmotif       * 1.22.3   2024-10-02 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4    2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5    2023-12-01 [1] CRAN (R 4.4.1)\n viridis                0.6.5    2024-01-29 [1] CRAN (R 4.4.1)\n viridisLite            0.4.2    2023-05-02 [1] CRAN (R 4.4.1)\n withr                  3.0.0    2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46     2024-07-18 [1] CRAN (R 4.4.1)\n XVector                0.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9    2024-07-05 [1] CRAN (R 4.4.1)\n yulab.utils            0.1.4    2024-01-28 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  },
  {
    "objectID": "chapters/gene_set_enrichment.html#references",
    "href": "chapters/gene_set_enrichment.html#references",
    "title": "2  Gene set enrichment analyses",
    "section": "References",
    "text": "References\n\n\n\n\nBailey, Timothy L, James Johnson, Charles E Grant, and William S Noble. 2015. “The MEME Suite.” Nucleic Acids Research 43 (W1): W39–49.\n\n\nBlackmore, Stephen, Jessica Hernandez, Michal Juda, Emily Ryder, Gregory G Freund, Rodney W Johnson, and Andrew J Steelman. 2017. “Influenza Infection Triggers Disease in a Genetic Model of Experimental Autoimmune Encephalomyelitis.” Proceedings of the National Academy of Sciences 114 (30): E6107–16.\n\n\nTremblay, Benjamin Jean-Marie. 2024. “Universalmotif: An r Package for Biological Motif Analysis.” Journal of Open Source Software 9 (100): 7012.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Gene set enrichment analyses</span>"
    ]
  }
]