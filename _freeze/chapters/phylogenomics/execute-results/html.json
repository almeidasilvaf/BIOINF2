{
  "hash": "d008daaa0f0b2d7bc75d83edd7ce3551",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Phylogenomics\n\nPhylogenomics aims at reconstructing the evolutionary histories of organisms\ntaking into account whole genomes or large fractions of genomes. In this \nlesson, you will learn how to infer a species tree from whole-genome\nsequence data using a standard phylogenomics pipeline.\n\n## Goals of this lesson\n\nIn this lesson, you will learn to:\n\n- identify single-copy orthologs, typical markers for phylogenomic\nstudies;\n- perform multiple sequence alignments;\n- infer phylogenetic trees using concatenation-based [@minh2020iq]\nand coalescent-based [@zhang2017astral] approaches;\n- read, explore, and visualize phylogenetic trees in R.\n\nWe will start by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(cogeqc)\nlibrary(Biostrings)\nlibrary(tidyverse)\nlibrary(ape)\nlibrary(msa)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e8)\n\nsource(here(\"code\", \"utils.R\")) # helper functions\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Data acquisition\n\nIn this lesson, we will use data from Ensembl [@harrison2024ensembl],\na database with genomic data for vertebrate species. However, since using\nall species on Ensembl would lead to much longer runtimes, we will only use\nspecies that are present on *Ensembl Pan Compara*, a cross-species comparative\nresource on Ensembl. We will start by retrieving species metadata.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get metadata for species on Pan Compara\nmetadata <- read_tsv(\n    \"https://ftp.ensembl.org/pub/release-113/species_EnsemblVertebrates.txt\",\n    show_col_types = FALSE, col_select = 1:15\n) |> \n    filter(pan_compara == \"Y\") |>\n    dplyr::select(1:6)\n\nmetadata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 6\n   `#name`              species division taxonomy_id assembly assembly_accession\n   <chr>                <chr>   <chr>          <dbl> <chr>    <chr>             \n 1 Green anole          anolis… Ensembl…       28377 AnoCar2… GCA_000090745.2   \n 2 C.savignyi           ciona_… Ensembl…       51511 CSAV 2.0 <NA>              \n 3 Zebrafish            danio_… Ensembl…        7955 GRCz11   GCA_000002035.4   \n 4 Chicken              gallus… Ensembl…        9031 bGalGal… GCA_016699485.1   \n 5 Stickleback          gaster… Ensembl…      481459 GAculea… GCA_016920845.1   \n 6 Human                homo_s… Ensembl…        9606 GRCh38.… GCA_000001405.29  \n 7 Opossum              monode… Ensembl…       13616 ASM229v1 GCA_000002295.1   \n 8 Mouse                mus_mu… Ensembl…       10090 GRCm39   GCA_000001635.9   \n 9 Platypus             ornith… Ensembl…        9258 mOrnAna… GCA_004115215.2   \n10 Chimpanzee           pan_tr… Ensembl…        9598 Pan_tro… GCA_000001515.5   \n11 Sumatran orangutan   pongo_… Ensembl…        9601 Susie_P… GCA_002880775.3   \n12 Tropical clawed frog xenopu… Ensembl…        8364 UCB_Xtr… GCA_000004195.4   \n```\n\n\n:::\n:::\n\n\nThen, we will obtain whole-genome protein sequences (only one for each\ngene) for each species. To do that, we will define a helper\nfunction to:\n\n1. Read FASTA files directly from Ensembl's FTP repository as `AAStringSet`\nobjects.\n2. Filter the `AAStringSet` objects to keep only translated sequences of\nlongest transcripts (i.e., one gene -> one protein).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define helper function to read proteomes from Ensembl\nget_proteomes <- function(species) {\n    \n    # Get URL to FTP directory\n    surl <- file.path(\n        \"https://ftp.ensembl.org/pub/release-113/fasta\", \n        species, \"pep/\"\n    )\n    \n    # Get protein sequences of longest transcripts for each gene\n    seqs <- lapply(surl, function(x) {\n        \n        ## Get links to FASTA files\n        fname <- XML::getHTMLLinks(RCurl::getURL(x, dirlistonly = TRUE))\n        fname <- fname[grep(\"\\\\.fa\\\\.gz$\", fname)]\n        fname <- fname[!grepl(\"abinitio\", fname)]\n        seq_path <- paste0(x, fname)\n        \n        ## Read sequences as an `AAStringSet` object\n        seq <- Biostrings::readAAStringSet(seq_path)\n        names(seq) <- gsub(\" .*\", \"\", gsub(\".*gene:\", \"\", names(seq)))\n        \n        ## Keep only translated sequence of longest transcript\n        seq <- seq[order(Biostrings::width(seq), decreasing = TRUE)]\n        seq <- seq[!duplicated(names(seq))]\n        \n        return(seq)\n    })\n    names(seqs) <- gsub(\"_\", \"\\\\.\", species)\n    \n    return(seqs)\n}\n```\n:::\n\n\nNow, we will *actually* get the proteomes by executing the function\nwe've just defined.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get proteomes for all species\nproteomes <- get_proteomes(metadata$species)\n```\n:::\n\n\n## Obtaining BUSCO genes\n\nNow that we have whole-genome protein sequences for each species,\nwe can run BUSCO to identify single-copy gene families in our proteomes.\nTo do that, BUSCO relies on comparing our sequences with pre-built \nprofile Hidden Markov Models (HMMs) for a particular clade. These profiles\nHMMs are available for a bunch of different clades (referred to as\n'lineage data sets'), and selecting the right lineage data set is critical to\ncorrectly identify single-copy gene families. To view a list of\nall lineage data sets available in BUSCO, you can run the following\ncode:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List lineage datasets\ncogeqc::list_busco_datasets()\n```\n:::\n\n\nAs you can see, the lineage data sets in BUSCO have a hierarchical (i.e., tree-like) \nstructure. For example, the lineage *vertebrata_odb10* contains two lineages, \n*actinopterygii_odb10* and *tetrapoda_odb10*. The lineage *tetrapoda_odb10*,\nin turn, contains the lineages *mammalia_odb10* and *sauropsida_odb10*.\nThe best lineage data set is usually thought to be the one that includes all\nspecies in your data set in the most taxonomically restricted way. \nThis is because the number of BUSCO genes decreases as we go from a broader\nclade (e.g. Vertebrata) to a stricter clade (e.g. Mammalia). For instance,\nif your data set contains only mammals, you could use lineages *metazoa_odb10*,\n*vertebrata_odb10*, *tetrapoda_odb10*, or *mammalia_odb10*. Let's see\nthe number of BUSCO genes for each of these clades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot number of BUSCO genes for clades from metazoa to mammalia\nclades <- \"metazoa|vertebrata|tetrapoda|mammalia\"\n\np_lineages <- rvest::read_html(\"https://busco.ezlab.org/list_of_lineages.html\") |>\n    rvest::html_table() |>\n    purrr::pluck(1) |>\n    dplyr::rename(lineage = 1, ngenes = 2) |>\n    filter(str_detect(lineage, clades)) |>\n    arrange(-ngenes) |>\n    mutate(lineage = as_factor(lineage)) |>\n    ggplot(aes(x = ngenes, y = lineage)) +\n    geom_bar(stat = \"identity\", fill = \"deepskyblue4\", color = \"black\") +\n    geom_text(aes(label = ngenes), hjust = -0.2) +\n    scale_x_continuous(limits = c(0, 1.2e4), expand = c(0.01, 0.01)) +\n    theme_classic() +\n    labs(\n        title = \"Number of BUSCO genes for each lineage\",\n        x = \"Number of genes\", y = \"Lineage\"\n    )\n\np_lineages\n```\n\n::: {.cell-output-display}\n![](phylogenomics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe plot shows that more restrict clades have more BUSCO genes. Thus, if you\nwant to infer a phylogeny for some mammals, you should choose *mammalia_odb10*\nas your lineage data set, not broader clades that include other things\nbeside mammals (e.g. *vertebrata_odb10* or *metazoa_odb10*).\n\nThe example data set in this lesson contains a diverse set of animals, \nmost of which are vertebrates, but also with the tunicate *Ciona savignyi* \n(outgroup). Given this data set (vertebrates + a tunicate), the best lineage\ndata set is *metazoa_odb10*. \n\nTo identify what BUSCO genes can be found in our data set, we can use\nthe function `run_busco` from the R package *[cogeqc](https://bioconductor.org/packages/3.19/cogeqc)*\nto run BUSCO in protein mode using *metazoa_odb10* as lineage data set. \nHowever, because running BUSCO takes several minutes, we will load\na pre-computed set of BUSCO genes identified in this data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load pre-computed BUSCO genes\nbusco_genes <- readRDS(here(\"output\", \"busco_seqs.rds\"))\n```\n:::\n\n\nThe file `busco_seqs.rds` was created with the code below, which does the\nfollowing:\n\n1. Run BUSCO in `protein` mode using *metazoa_odb10* as lineage data set.\n2. Identify BUSCO genes that are shared by all species (i.e., species coverage\nof 100%);\n3. Read sequences of conserved BUSCO genes as a list of `AAStringSet` objects,\neach containing 12 sequences (the BUSCO gene *i* in all 12 species).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show me the code\"}\n# Export sequences to a directory\nseq_dir <- file.path(tempdir(), \"seqs\")\ndir.create(seq_dir)\n\ne <- lapply(seq_along(proteomes), function(x) {\n    fn <- file.path(seq_dir, paste0(names(proteomes)[x], \".fasta\"))\n    writeXStringSet(proteomes[[x]], filepath = fn)\n})\n\n# Run BUSCO in `protein` mode\nbusco_output <- file.path(tempdir(), \"busco\") # path to BUSCO output\ndata_output <- file.path(tempdir(), \"datasets\") # path to BUSCO datasets\n\ncogeqc::run_busco(\n    sequence = seq_dir,\n    outlabel = \"ensembl\",\n    mode = \"proteins\",\n    lineage = \"metazoa_odb10\",\n    outpath = busco_output,\n    download_path = data_output,\n    threads = 4\n)\n\n# Read sequences of BUSCO genes\nbusco_seqdir <- file.path(busco_output, \"ensembl\")\nbusco_seqs <- read_busco_sequences(busco_seqdir)\n\n# Save object to file\nsaveRDS(busco_seqs, compress = \"xz\", file = here(\"output\", \"busco_seqs.rds\"))\n```\n:::\n\n\nThis is what the object looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the first 3 BUSCO genes\nhead(busco_genes, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1050 MALSLDREAYYRRIKRLYSNWQK...HHRSSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [2]  1040 MSISLDKDAFFRRLKKIYSTWES...SDDDEGETMRRVGRIGMNWRRR ciona.savignyi\n [3]  1033 MAVSLDKDAFYRRIKRLYGNWKK...SNRKRKGRSSAPPPRSKKKRRH danio.rerio\n [4]   642 MEAVRKQKPELMAKITKNLGFAM...GRWGRWGRWGRWGHWGCWGQWG gallus.gallus\n [5]   938 MAVNLDKEAYYRRIKRFYGNWKK...EDSDEDYDSDTEDSSEILLFGH gasterosteus.acul...\n ...   ... ...\n [8]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[10]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK pan.troglodytes\n[11]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK pongo.abelii\n[12]  1035 MAVTLDKEAYYRRIKRFYGNWKK...QKGGKKRKVHAPAPNPSKKRKK xenopus.tropicalis\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   988 MAAAAASSSASGASSSSSSGPGG...NNWQSKIGEILVLVAAKIKNTF anolis.carolinensis\n [2]   739 NRSFHPQFSGYAGNLFSSGPYEK...KNWKLKTKELLPIISSKVPVAF ciona.savignyi\n [3]   974 MASSAAKQPPKNASKAPSGGAGG...LNWQKNIGEILVLVASKIKNSF danio.rerio\n [4]   999 MNKKKKPFLGMPAPLGYVPGLGR...VNWQKKIGEILVLVAAKLKNTF gallus.gallus\n [5]   973 MASTGIKQGPKLVSKSSAGGAGA...TVSRTSRSAVSRSVFPLKSITV gasterosteus.acul...\n ...   ... ...\n [8]   941 MNKKKKPFLGMPAPLGYVPGLGR...TNWQRKIGEILVLVAARIKNTF mus.musculus\n [9]   941 MNKKKKPFLGMPAPLGYVPGLGR...ENWQKKIGEILVLVAAKIKNAF ornithorhynchus.a...\n[10]   941 MNKKKKPFLGMPAPLGYVPGLGR...ANWQKKIGDILRLVAGRIKNTF pan.troglodytes\n[11]   964 MTLQNYYYYYYYYFFFFETKSCS...ANWQKKIGDILRLVAGRIKNTF pongo.abelii\n[12]   972 MAASVSAGSGAGPSGSGNPTGTS...KNWQQKIGEILVLVAAQIKNAF xenopus.tropicalis\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   947 MSGFSPELIEYLEGKISFEEFER...RGGELAGSDRWCCLSFSEEQKP anolis.carolinensis\n [2]   771 SRLPRELRGLMGEANLCYARGDH...LIYRKSGNIDLANQTIHKYCVV ciona.savignyi\n [3]   918 MSELNDYLEGKITFEEFEKRREE...LIYQSSGNKDMARHIIYTYCTI danio.rerio\n [4]   927 MSGFSPELIDYLEGKISFEEFER...LIYHSSGNTRMAQKMLYTYAVV gallus.gallus\n [5]   944 MSGFSSELIDYLEGRITFEEFDQ...LIYQASGNMGMAHQLINTHCII gasterosteus.acul...\n ...   ... ...\n [8]   882 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTAMAQKLLYTYCVI mus.musculus\n [9]   899 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLGLARRLLYTWGSV ornithorhynchus.a...\n[10]   884 MSGFSPELIDYLEGKISSSSSNG...LIYQSSGNTGMAQTLLYTYCSI pan.troglodytes\n[11]   885 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQRLLYTYCSI pongo.abelii\n[12]   880 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLEMARRLLHQYCVS xenopus.tropicalis\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check number of genes\nlength(busco_genes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 282\n```\n\n\n:::\n:::\n\n\nAs you can see, we found 282 BUSCO genes shared by all 12 species in our data\nset. These 282 genes represent our marker gene set for phylogeny inference.\n\n## Multiple sequence alignment\n\nOnce we have our marker genes, we can perform a multiple sequence \nalignment (MSA) and use the MSA to infer a phylogeny.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform MSA for each BUSCO gene with MUSCLE\nmsas <- lapply(busco_genes, msa, method = \"Muscle\")\n\n# Convert MSAs to `AAStringSet` class\nmsas_aa <- lapply(msas, as, \"AAStringSet\")\n```\n:::\n\n\nLet's take a look at the first few MSAs to see what they look like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the MSAs for the first 3 genes\nhead(msas_aa, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1123 MSISLDKDAFFRRLKKIYSTWES...-------------------RRR ciona.savignyi\n [2]  1123 -----------------------...WGQWG----------------- gallus.gallus\n [3]  1123 MAVTLDKEAYYRRIKRFYGNWK-...-----------PAPNPSKKRKK xenopus.tropicalis\n [4]  1123 MALSLDREAYYRRIKRLYSNWQ-...HHRSSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [5]  1123 MAVTLDKDAYYRRVKRLYSNWR-...R---GSNRGSRHSSAPPKKKRK homo.sapiens\n ...   ... ...\n [8]  1123 MAVTLDKDAYYRRVKRLYSNWR-...R---GSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1123 MAVTLDKEAYYRRVKRLYSNWR-...R---GSSRGSRHSSAPPKKKRK monodelphis.domes...\n[10]  1123 MAVTLDKEAYYRRVKRLYSNWR-...R---GSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[11]  1123 MAVSLDKDAFYRRIKRLYGNWK-...-------RSSAPPPRSKKKRRH danio.rerio\n[12]  1123 MAVNLDKEAYYRRIKRFYGNWK-...---------------------- gasterosteus.acul...\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1062 -----------------------...LLPII--SSKVPVAF------- ciona.savignyi\n [2]  1062 -----MASTGIKQGPKLVSKSSA...TVSRTSRSAVSRSVFPLKSITV gasterosteus.acul...\n [3]  1062 -----MASSAAKQPPKNASKAPS...ILVLV--ASKIKNSF------- danio.rerio\n [4]  1062 -------MAASVSAGSGAGPSGS...ILVLV--AAQIKNAF------- xenopus.tropicalis\n [5]  1062 MTLQNYYYYYYYYFFFFETKSCS...ILRLV--AGRIKNTF------- pongo.abelii\n ...   ... ...\n [8]  1062 -----------------------...ILVLV--AARIKNTF------- mus.musculus\n [9]  1062 -----------------------...ILVLV--AAKLKNTF------- gallus.gallus\n[10]  1062 -----MAAAAASSSASGASSSSS...ILVLV--AAKIKNTF------- anolis.carolinensis\n[11]  1062 -----------------------...IYII------------------ monodelphis.domes...\n[12]  1062 -----------------------...ILVLV--AAKIKNAF------- ornithorhynchus.a...\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1050 -----------------------...LANQTI--HKYCVV-------- ciona.savignyi\n [2]  1050 MSGFSSELIDYLEGRITFEEFDQ...MAHQLI--NTHCII-------- gasterosteus.acul...\n [3]  1050 ----MSELNDYLEGKITFEEFEK...MARHII--YTYCTI-------- danio.rerio\n [4]  1050 MSGFSPELIDYLEGKISFEEFER...MARRLL--HQYCVS-------- xenopus.tropicalis\n [5]  1050 MSGFSPELIDYLEGKISFEEFER...LARRLL--YTWGSV-------- ornithorhynchus.a...\n ...   ... ...\n [8]  1050 MSGFSPELIDYLEGKISFEEFER...MARKLL--YTYGTI-------- monodelphis.domes...\n [9]  1050 MSGFSPELIDYLEGKISFEEFER...MAQKLL--YTYCVI-------- mus.musculus\n[10]  1050 MSGFSPELIDYLEGKIS----SS...MAQTLL--YTYCSI-------- pan.troglodytes\n[11]  1050 MSGFSPELIDYLEGKISFEEFER...MAQTLL--YTYCSI-------- homo.sapiens\n[12]  1050 MSGFSPELIDYLEGKISFEEFER...MAQRLL--YTYCSI-------- pongo.abelii\n```\n\n\n:::\n:::\n\n\n[You can also use the function `msaPrettyPrint()` from the *[ggmsa](https://bioconductor.org/packages/3.19/ggmsa)* package to visualize the MSA. This function will create a PDF in your working environment with a publication-ready figure (often with multiple pages, as MSAs are typically long) displaying your MSA]{.aside}\n\nI guess you can see that some alignments have columns with a lot of gaps.\nSince these are usually not much informative for phylogeny inference, it is\ncommon practice to remove MSA columns with too many gaps. This process is\ncalled 'trimming'. Here, we will the helper function `trim_alignment()` \n(source code in file *utils.R*) to remove alignment columns with >50% of gaps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Trim MSAs with remove columns with >50% of gaps\ntrimmed_msas <- lapply(msas_aa, trim_alignment, max_gap = 0.5)\n\n# Take a look at trimmed MSAs\nhead(trimmed_msas, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`102804at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]  1047 MSISLDKDAFFRRLKKIYSTWEN...-------------------RRR ciona.savignyi\n [2]  1047 -----------------------...WGCWG----------------- gallus.gallus\n [3]  1047 MAVTLDKEAYYRRIKRFYGNWKK...-----------PAPNPSKKRKK xenopus.tropicalis\n [4]  1047 MALSLDREAYYRRIKRLYSNWQK...SSGHSHSRSPGRSSAPPKKKRK anolis.carolinensis\n [5]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK homo.sapiens\n ...   ... ...\n [8]  1047 MAVTLDKDAYYRRVKRLYSNWRK...SSGRGSNRGSRHSSAPPKKKRK mus.musculus\n [9]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSSRGSRHSSAPPKKKRK monodelphis.domes...\n[10]  1047 MAVTLDKEAYYRRVKRLYSNWRK...SSGRGSGRGSRHSSAPPKKKRK ornithorhynchus.a...\n[11]  1047 MAVSLDKDAFYRRIKRLYGNWKK...-------RSSAPPPRSKKKRRH danio.rerio\n[12]  1047 MAVNLDKEAYYRRIKRFYGNWKK...---------------------- gasterosteus.acul...\n\n$`107151at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   941 -----------------------...KNWKLKTKELLPIISSKVPVAF ciona.savignyi\n [2]   941 MGKKKKPFLGMPAPLGYVPGLGR...NTWRTWSCETVSRTSAVSRSVF gasterosteus.acul...\n [3]   941 LNKKKKPFLGMPAPLGYVPGLGR...LNWQKNIGEILVLVASKIKNSF danio.rerio\n [4]   941 MNKKKKPFLGMPAPLGYVPGLGR...KNWQQKIGEILVLVAAQIKNAF xenopus.tropicalis\n [5]   941 --QWRDLIIQTPGVL----GVSC...ANWQKKIGDILRLVAGRIKNTF pongo.abelii\n ...   ... ...\n [8]   941 MNKKKKPFLGMPAPLGYVPGLGR...TNWQRKIGEILVLVAARIKNTF mus.musculus\n [9]   941 MNKKKKPFLGMPAPLGYVPGLGR...VNWQKKIGEILVLVAAKLKNTF gallus.gallus\n[10]   941 MNRKKKPFLGMPAPLGYVPGLGR...NNWQSKIGEILVLVAAKIKNTF anolis.carolinensis\n[11]   941 MNKKKKPFLGMPAPLGYVPGLGR...---KEQVSNIYII--------- monodelphis.domes...\n[12]   941 MNKKKKPFLGMPAPLGYVPGLGR...ENWQKKIGEILVLVAAKIKNAF ornithorhynchus.a...\n\n$`108764at33208`\nAAStringSet object of length 12:\n     width seq                                              names               \n [1]   902 -----------------------...LIYRKSGNIDLANQTIHKYCVV ciona.savignyi\n [2]   902 MSGFSSELIDYLEGRITFEEFDQ...LIYQASGNMGMAHQLINTHCII gasterosteus.acul...\n [3]   902 ----MSELNDYLEGKITFEEFEK...LIYQSSGNKDMARHIIYTYCTI danio.rerio\n [4]   902 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLEMARRLLHQYCVS xenopus.tropicalis\n [5]   902 MSGFSPELIDYLEGKISFEEFER...LIYQNSGNLGLARRLLYTWGSV ornithorhynchus.a...\n ...   ... ...\n [8]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNMGMARKLLYTYGTI monodelphis.domes...\n [9]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTAMAQKLLYTYCVI mus.musculus\n[10]   902 MSGFSPELIDYLEGKIS----SS...LIYQSSGNTGMAQTLLYTYCSI pan.troglodytes\n[11]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQTLLYTYCSI homo.sapiens\n[12]   902 MSGFSPELIDYLEGKISFEEFER...LIYQSSGNTGMAQRLLYTYCSI pongo.abelii\n```\n\n\n:::\n:::\n\n\nNow that we have trimmed MSAs, we can use them to infer a phylogeny.\n\n## Phylogeny inference: concatenation-based approaches\n\nThe simplest way of inferring a phylogeny from phylogenomic (i.e. multi-gene)\ndata sets is to concatenate MSAs for each gene into a single MSA, and then\ninfer a phylogeny as you'd do for a single MSA. This concatenated MSA is often\nreferred to as a 'supermatrix', which is why this approach is usually\ncalled 'supermatrix-based', or 'concatenation-based'.\n\nTo demonstrate how this works, we will concatenate MSAs and infer a species\ntree using IQ-TREE 2 [@minh2020iq]. For that, we will use a helper function\n`infer_species_tree()` (source code in *utils.R*), which runs IQ-TREE 2 from\nthe R session and reads the inferred tree as an object of \nclass `phylo` (standard class to represent trees in R, from the \n*[ape](https://CRAN.R-project.org/package=ape)* package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenate alignments\nconc_msa <- Reduce(xscat, trimmed_msas)\nnames(conc_msa) <- names(trimmed_msas[[1]])\n\n# Take a look at the concatenated alignment\nhead(conc_msa)\n\n# Infer species tree from concatenated alignment\noutgroup <- \"ciona.savignyi\"\ntree_conc <- infer_species_tree(\n    list(conc = conc_msa),\n    outgroup, \n    threads = 4\n)\n```\n:::\n\n\nThe tree inferred from the concatenated alignment is stored in \n`output/trees/supermatrix.treefile`, and the output file with a detailed \nsummary (models and AICs/BICs, base frequencies, etc) is stored in \n`output/trees/supermatrix.iqtree`. To load a phylogenetic tree from a file,\nyou can use the function `read.tree()` from the R package *[ape](https://CRAN.R-project.org/package=ape)*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read tree as a `phylo` object\ntree_conc <- read.tree(here(\"output\", \"trees\", \"supermatrix.treefile\"))\n\n# Plot tree\nplot(tree_conc)\n```\n\n::: {.cell-output-display}\n![](phylogenomics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## Phylogeny inference: coalescent-based approaches\n\nHere, instead of inferring a single tree from concatenated MSAs, we will\ninfer an individual tree for each BUSCO gene. We will then use these set of \ntrees to calculate concordance factors and use coalescent-based approaches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer single-locus trees\noutgroup <- \"ciona.savignyi\"\ntree_sl <- infer_singlelocus_trees(\n    trimmed_msas,\n    outgroup,\n    outdir = here(\"output\", \"sl_trees\"),\n    threads = 4\n)\n```\n:::\n\n\nNow, we will read the output tree file. Since this is not one, but many trees,\ntrees will be stored in an object of class `multiPhylo`. In essence,\na `multiPhylo` object is a list of multiple `phylo` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read tree\ntree_sl <- read.tree(here(\"output\", \"sl_trees\", \"sl.treefile\"))\n\ntree_sl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n282 phylogenetic trees\n```\n\n\n:::\n:::\n\n\nNext, we will infer a species tree from this set of gene trees using\nASTRAL [@zhang2017astral], a Java program that can be run on the \ncommand line using the following code:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\njava -jar astral.5.7.8.jar -i sl.treefile -o astral.tree\n```\n:::\n\n\nThen, we can read the species tree created by ASTRAL. Note that ASTRAL\nis a coalescent-based method that uses parsimony principles to infer\n**a single species tree** from **a set of (many) gene trees**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read species tree created with ASTRAL\nastral_tree <- read.tree(here(\"output\", \"sl_trees\", \"astral.tree\"))\n\n# Plot tree\nplot(astral_tree)\n```\n\n::: {.cell-output-display}\n![](phylogenomics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nFinally, once we have a representative species tree (generated by ASTRAL)\nand multiple gene trees (generated by IQ-TREE 2), we can calculate so-called \n*gene concordance factors (gCF)*, which represent the proportion of\ndecisive gene trees that support each branch of the species tree. These can\nbe computed with the code below\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate gCF with IQ-TREE 2\nargs <- c(\n    \"-t\", here(\"output\", \"sl_trees\", \"astral.tree\"),\n    \"--gcf\", here(\"output\", \"sl_trees\", \"sl.treefile\"),\n    \"--prefix\", here(\"output\", \"sl_trees\", \"gcf\")\n)\n\nsystem2(\"iqtree2\", args)\n```\n:::\n\n\nThen, we can read the tree and explore the tree with gCF for each branch\nwith:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read tree with gCF\ngcf_tree <- read.tree(here(\"output\", \"sl_trees\", \"gcf.cf.tree\"))\n\nplot(gcf_tree, show.node.label = TRUE)\n```\n\n::: {.cell-output-display}\n![](phylogenomics_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Session information {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=nl_BE.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=nl_BE.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=nl_BE.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=nl_BE.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Arctic/Longyearbyen\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] msa_1.36.1          ape_5.8             lubridate_1.9.3    \n [4] forcats_1.0.0       stringr_1.5.1       dplyr_1.1.4        \n [7] purrr_1.0.2         readr_2.1.5         tidyr_1.3.1        \n[10] tibble_3.2.1        ggplot2_3.5.1       tidyverse_2.0.0    \n[13] Biostrings_2.72.1   GenomeInfoDb_1.40.1 XVector_0.44.0     \n[16] IRanges_2.38.1      S4Vectors_0.42.1    BiocGenerics_0.50.0\n[19] cogeqc_1.8.0        here_1.0.1         \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1        farver_2.1.2            vipor_0.4.7            \n [4] fastmap_1.2.0           lazyeval_0.2.2          promises_1.3.0         \n [7] digest_0.6.36           timechange_0.3.0        lifecycle_1.0.4        \n[10] processx_3.8.4          tidytree_0.4.6          magrittr_2.0.3         \n[13] compiler_4.4.1          rlang_1.1.4             tools_4.4.1            \n[16] igraph_2.0.3            utf8_1.2.4              yaml_2.3.9             \n[19] knitr_1.48              labeling_0.4.3          htmlwidgets_1.6.4      \n[22] bit_4.0.5               curl_5.2.1              xml2_1.3.6             \n[25] plyr_1.8.9              websocket_1.4.2         aplot_0.2.3            \n[28] withr_3.0.0             grid_4.4.1              fansi_1.0.6            \n[31] colorspace_2.1-0        scales_1.3.0            cli_3.6.3              \n[34] rmarkdown_2.27          crayon_1.5.3            treeio_1.28.0          \n[37] generics_0.1.3          rstudioapi_0.16.0       ggtree_3.12.0          \n[40] httr_1.4.7              reshape2_1.4.4          tzdb_0.4.0             \n[43] chromote_0.3.1          ggbeeswarm_0.7.2        cachem_1.1.0           \n[46] zlibbioc_1.50.0         rvest_1.0.4             parallel_4.4.1         \n[49] ggplotify_0.1.2         BiocManager_1.30.23     yulab.utils_0.1.4      \n[52] vctrs_0.6.5             jsonlite_1.8.8          gridGraphics_0.5-1     \n[55] hms_1.1.3               patchwork_1.2.0         bit64_4.0.5            \n[58] beeswarm_0.4.0          glue_1.7.0              ps_1.7.7               \n[61] stringi_1.8.4           gtable_0.3.5            later_1.3.2            \n[64] UCSC.utils_1.0.0        munsell_0.5.1           pillar_1.9.0           \n[67] htmltools_0.5.8.1       GenomeInfoDbData_1.2.12 R6_2.5.1               \n[70] rprojroot_2.0.4         vroom_1.6.5             evaluate_0.24.0        \n[73] lattice_0.22-6          BiocStyle_2.32.1        memoise_2.0.1          \n[76] ggfun_0.1.5             Rcpp_1.0.13             nlme_3.1-165           \n[79] xfun_0.46               fs_1.6.4                pkgconfig_2.0.3        \n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n\n\n\n\n\n\n\n",
    "supporting": [
      "phylogenomics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}