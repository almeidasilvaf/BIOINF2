{
  "hash": "93cb67cd573821e4cea5ab5b74ef187e",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Gene set enrichment analyses\n\nGene set enrichment analyses are commonly used to identify overrepresented\nterms (mostly functional categories, but also sequence motifs and other\nsets) among a particular set of terms. For instance, researchers typically\nwant to find if a list of differentially expressed genes (DEGs) is \noverrepresented in genes related to a specific pathway. To do that, we\nuse statistical methods to calculate the probability of finding the frequency\nof terms we found by chance (under the null hypothesis). Although simple,\n(correctly) performing enrichment analyses requires special attention to avoid\ncommon mistakes and pitfalls.\n\n## Goals of this lesson\n\nIn this lesson, you will learn to:\n\n- perform enrichment analyses for functional terms among differentially\nexpressed genes;\n- perform enrichment analyses for sequence motifs among a set of \npromoter sequences.\n\nWe will start by loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SummarizedExperiment)\nlibrary(DESeq2)\nlibrary(clusterProfiler)\nlibrary(enrichplot)\nlibrary(org.Mm.eg.db)\nlibrary(universalmotif)\n\nset.seed(123) # for reproducibility\n```\n:::\n\n\n## Enrichment for functional terms\n\nTo start, we will load an RNA-seq data set stored as a `SummarizedExperiment`\nobject in `data/GSE96870_se.rds`. Data were obtained from \n@blackmore2017influenza and modified to keep only a subset of the samples.\nIn this experiment, researchers were trying to investigate how gene expression\nchanges in male and female mice 4 and 8 days after infection with Influenza A.\nSamples were extracted from spinal cord and cerebellum tissues, but here we \nwill only cerebellum samples only. \n\nLet's load the `SummarizedExperiment` object and take a look at it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nse <- readRDS(here(\"data\", \"GSE96870_se.rds\"))\n\n# Inspect data\n## Entire object\nse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 41786 22 \nmetadata(0):\nassays(1): counts\nrownames(41786): Xkr4 LOC105243853 ... TrnT TrnP\nrowData names(3): ENTREZID product gbkey\ncolnames(22): GSM2545337 GSM2545338 ... GSM2545346 GSM2545347\ncolData names(12): title geo_accession ... Label Group\n```\n\n\n:::\n\n```{.r .cell-code}\n## Count matrix\nassay(se) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             GSM2545337 GSM2545338 GSM2545348 GSM2545353 GSM2545343 GSM2545349\nXkr4               2410       2159       2275       1910       2235       1881\nLOC105243853          0          1          1          0          3          0\nLOC105242387        121        110        161        214        130        154\nLOC105242467          5          5          2          1          2          4\nRp1                   2          0          3          1          1          6\nSox17               239        218        302        322        296        286\n             GSM2545354 GSM2545339 GSM2545344 GSM2545352 GSM2545362 GSM2545340\nXkr4               1771       1980       1779       1890       2315       1977\nLOC105243853          0          4          3          1          1          0\nLOC105242387        124        120        131        272        189        172\nLOC105242467          4          5          2          3          2          2\nRp1                   3          3          1          5          3          2\nSox17               273        220        233        267        197        261\n             GSM2545345 GSM2545350 GSM2545363 GSM2545336 GSM2545342 GSM2545351\nXkr4               1528       2584       1645       1891       1757       1837\nLOC105243853          0          0          0          0          1          1\nLOC105242387        160        124        223        204        177        221\nLOC105242467          2          7          1         12          3          1\nRp1                   2          5          1          2          3          3\nSox17               271        325        310        251        179        201\n             GSM2545380 GSM2545341 GSM2545346 GSM2545347\nXkr4               1723       1945       1644       1585\nLOC105243853          1          0          1          3\nLOC105242387        251        173        180        176\nLOC105242467          4          6          1          2\nRp1                   0          1          2          2\nSox17               246        232        205        230\n```\n\n\n:::\n\n```{.r .cell-code}\n## Sample metadata\ncolData(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 22 rows and 12 columns\n                     title geo_accession     organism         age         sex\n               <character>   <character>  <character> <character> <character>\nGSM2545337 CNS_RNA-seq_11C    GSM2545337 Mus musculus     8 weeks      Female\nGSM2545338 CNS_RNA-seq_12C    GSM2545338 Mus musculus     8 weeks      Female\nGSM2545348 CNS_RNA-seq_27C    GSM2545348 Mus musculus     8 weeks      Female\nGSM2545353  CNS_RNA-seq_3C    GSM2545353 Mus musculus     8 weeks      Female\nGSM2545343 CNS_RNA-seq_20C    GSM2545343 Mus musculus     8 weeks        Male\n...                    ...           ...          ...         ...         ...\nGSM2545351  CNS_RNA-seq_2C    GSM2545351 Mus musculus     8 weeks      Female\nGSM2545380  CNS_RNA-seq_9C    GSM2545380 Mus musculus     8 weeks      Female\nGSM2545341 CNS_RNA-seq_17C    GSM2545341 Mus musculus     8 weeks        Male\nGSM2545346 CNS_RNA-seq_25C    GSM2545346 Mus musculus     8 weeks        Male\nGSM2545347 CNS_RNA-seq_26C    GSM2545347 Mus musculus     8 weeks        Male\n             infection      strain        time      tissue     mouse\n           <character> <character> <character> <character> <integer>\nGSM2545337 NonInfected     C57BL/6        Day0  Cerebellum         9\nGSM2545338 NonInfected     C57BL/6        Day0  Cerebellum        10\nGSM2545348 NonInfected     C57BL/6        Day0  Cerebellum         8\nGSM2545353 NonInfected     C57BL/6        Day0  Cerebellum         4\nGSM2545343 NonInfected     C57BL/6        Day0  Cerebellum        11\n...                ...         ...         ...         ...       ...\nGSM2545351  InfluenzaA     C57BL/6        Day8  Cerebellum        16\nGSM2545380  InfluenzaA     C57BL/6        Day8  Cerebellum        19\nGSM2545341  InfluenzaA     C57BL/6        Day8  Cerebellum         6\nGSM2545346  InfluenzaA     C57BL/6        Day8  Cerebellum        23\nGSM2545347  InfluenzaA     C57BL/6        Day8  Cerebellum        24\n                    Label       Group\n                 <factor>    <factor>\nGSM2545337 Female_Day0_9  Female_Day0\nGSM2545338 Female_Day0_10 Female_Day0\nGSM2545348 Female_Day0_8  Female_Day0\nGSM2545353 Female_Day0_4  Female_Day0\nGSM2545343 Male_Day0_11   Male_Day0  \n...                   ...         ...\nGSM2545351 Female_Day8_16 Female_Day8\nGSM2545380 Female_Day8_19 Female_Day8\nGSM2545341 Male_Day8_6    Male_Day8  \nGSM2545346 Male_Day8_23   Male_Day8  \nGSM2545347 Male_Day8_24   Male_Day8  \n```\n\n\n:::\n:::\n\n\nNow, we will identify genes that are differentially expressed on day 8 after\ninfection compared to day 0 (control).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Keep only protein-coding genes\nse <- se[rowData(se)$gbkey == \"mRNA\"]\n\n# Get gene-wise differential expression test statistics (design: sex + time)\ndds <- DESeqDataSet(se, design = ~ sex + time)\ndds <- DESeq(dds)\n\n# Obtain results from the desired contrast: day 8 vs day 0\nres <- results(dds, contrast = c(\"time\", \"Day8\", \"Day0\"))\n\n# Get differentially expressed genes (DEGs) in a character vector\ndeg <- res |>\n    as.data.frame() |>\n    filter(padj <0.05, abs(log2FoldChange) > log2(1.5)) |>\n    tibble::rownames_to_column(\"gene\") |>\n    pull(gene)\n\nhead(deg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3110035E14Rik\" \"Sgk3\"          \"Kcnb2\"         \"Sbspon\"       \n[5] \"Gsta3\"         \"Lman2l\"       \n```\n\n\n:::\n:::\n\n\nNext, we will try find out if this set of DEGs is overrepresented in genes\nassociated with a particular Gene Ontology (GO) term. For that, we will\nGO annotation in the `OrgDb` package for mouse. Bioconductor provides\nso-called `OrgDb` packages with annotation data for a bunch of model organisms,\nand many packages (including *[clusterProfiler](https://bioconductor.org/packages/3.19/clusterProfiler)*,\nwhich we will use to perform overrepresentation analysis) can use OrgDb \npackages to easily and automatically retrieve data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform ORA for GO terms\nora_go <- enrichGO(\n    gene = deg, \n    keyType = \"SYMBOL\",\n    ont = \"BP\", \n    OrgDb = org.Mm.eg.db\n)\n\n# Explore results as a data frame\nas.data.frame(ora_go) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   ID                Description GeneRatio   BgRatio\nGO:0050900 GO:0050900        leukocyte migration    51/968 402/28905\nGO:0006935 GO:0006935                 chemotaxis    52/968 465/28905\nGO:0042330 GO:0042330                      taxis    52/968 467/28905\nGO:0030595 GO:0030595       leukocyte chemotaxis    36/968 242/28905\nGO:0071674 GO:0071674 mononuclear cell migration    32/968 203/28905\nGO:0060326 GO:0060326            cell chemotaxis    41/968 334/28905\n                 pvalue     p.adjust       qvalue\nGO:0050900 3.536123e-16 1.795643e-12 1.304643e-12\nGO:0006935 3.336947e-14 6.712316e-11 4.876903e-11\nGO:0042330 3.965528e-14 6.712316e-11 4.876903e-11\nGO:0030595 6.591196e-14 8.367524e-11 6.079511e-11\nGO:0071674 3.208410e-13 3.258461e-10 2.367469e-10\nGO:0060326 8.641191e-13 7.313328e-10 5.313575e-10\n                                                                                                                                                                                                                                                                                                               geneID\nGO:0050900              Tnfsf18/Sell/Slamf9/Fut7/Itga4/Mdk/Grem1/Ada/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Ascl2/Calr/Ccl17/Enpp1/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Aoc3/Itgb3/Ccl28/Lgals3/Ptk2b/Emp2/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Il33/Ch25h\nGO:0006935 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Ntf3/Trpm4/Hsd3b7/Itgam/Adam8/Lsp1/Calr/Ccl17/Robo3/Cmtm7/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Tubb2b/Ccl28/Lgals3/Cmtm5/Ptk2b/Nr4a1/Casr/Retnlg/Fpr2/Dusp1/Ager/Stx3/Ch25h/Plxnb3/Nox1\nGO:0042330 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Ntf3/Trpm4/Hsd3b7/Itgam/Adam8/Lsp1/Calr/Ccl17/Robo3/Cmtm7/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Tubb2b/Ccl28/Lgals3/Cmtm5/Ptk2b/Nr4a1/Casr/Retnlg/Fpr2/Dusp1/Ager/Stx3/Ch25h/Plxnb3/Nox1\nGO:0030595                                                                                              Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Lgals3/Ptk2b/Retnlg/Fpr2/Dusp1/Ch25h\nGO:0071674                                                                                                                      Tnfsf18/Slamf9/Fut7/Itga4/Mdk/Grem1/Il12a/Nbl1/Padi2/Alox5/Trpm4/Hsd3b7/Adam8/Ascl2/Calr/Ccl17/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Lgals3/Ptk2b/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Ch25h\nGO:0060326                                                                Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Lpar1/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Ccl28/Lgals3/Ptk2b/Nr4a1/Retnlg/Fpr2/Dusp1/Ch25h/Plxnb3/Nox1\n           Count\nGO:0050900    51\nGO:0006935    52\nGO:0042330    52\nGO:0030595    36\nGO:0071674    32\nGO:0060326    41\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Overrepresentation analyses with non-model organisms\n\nIf you're working with a non-model organism for which an `OrgDb` package\nis not available, you can create a 2-column data frame with functional\nannotation in the first column and gene IDs in the second column. Then,\nyou can pass this annotation data frame to the `enricher()` function in\n*[clusterProfiler](https://bioconductor.org/packages/3.19/clusterProfiler)*, which is more flexible and does\nnot expect `OrgDb` objects as input.\n\n:::\n\nAs you can see, the `enrichGO()` function returned GO terms that are\nsignificantly overrepresented in our set of DEGs. However, there is an\nimportant issue with the way we performed the enrichment analysis: `enrichGO()`\nused all genes in the mouse genome as background (or 'universe'). This does\nnot make sense, because we didn't use all genes for our differential expression \nanalysis (e.g., we removed non-protein-coding genes). Choosing the right\nuniverse is **very important**, because a larger universe leads to\nmore false positives (see an example [here](https://carpentries-incubator.github.io/bioc-rnaseq/07-gene-set-analysis.html#choose-a-proper-universe)).\n\n\nNow, let's perform the enrichment analysis again, but this time\nrestricting our universe to only those genes in the expression matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform ORA for GO terms with restricted universe\nora_go2 <- enrichGO(\n    gene = deg, \n    keyType = \"SYMBOL\",\n    ont = \"BP\", \n    universe = rownames(se),\n    OrgDb = org.Mm.eg.db\n)\n\n# Explore results as a data frame\nas.data.frame(ora_go2) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   ID\nGO:0050900 GO:0050900\nGO:0071674 GO:0071674\nGO:0030595 GO:0030595\nGO:0002523 GO:0002523\nGO:0035456 GO:0035456\nGO:0002460 GO:0002460\n                                                                                                                         Description\nGO:0050900                                                                                                       leukocyte migration\nGO:0071674                                                                                                mononuclear cell migration\nGO:0030595                                                                                                      leukocyte chemotaxis\nGO:0002523                                                                     leukocyte migration involved in inflammatory response\nGO:0035456                                                                                               response to interferon-beta\nGO:0002460 adaptive immune response based on somatic recombination of immune receptors built from immunoglobulin superfamily domains\n           GeneRatio   BgRatio       pvalue     p.adjust       qvalue\nGO:0050900    51/968 372/16569 1.116320e-08 3.694287e-05 3.332087e-05\nGO:0071674    32/968 180/16569 1.468901e-08 3.694287e-05 3.332087e-05\nGO:0030595    36/968 222/16569 2.301099e-08 3.858177e-05 3.479908e-05\nGO:0002523    11/968  25/16569 5.344683e-08 5.632460e-05 5.080235e-05\nGO:0035456    16/968  55/16569 5.598867e-08 5.632460e-05 5.080235e-05\nGO:0002460    44/968 320/16569 1.044964e-07 8.760284e-05 7.901396e-05\n                                                                                                                                                                                                                                                                                                  geneID\nGO:0050900 Tnfsf18/Sell/Slamf9/Fut7/Itga4/Mdk/Grem1/Ada/Prex1/Edn3/P2ry12/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Ascl2/Calr/Ccl17/Enpp1/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Aoc3/Itgb3/Ccl28/Lgals3/Ptk2b/Emp2/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Il33/Ch25h\nGO:0071674                                                                                                         Tnfsf18/Slamf9/Fut7/Itga4/Mdk/Grem1/Il12a/Nbl1/Padi2/Alox5/Trpm4/Hsd3b7/Adam8/Ascl2/Calr/Ccl17/Aire/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Itgb3/Lgals3/Ptk2b/Apod/Retnlg/Plg/Fpr2/Dusp1/Ager/Ch25h\nGO:0030595                                                                                 Tnfsf18/Sell/Slamf9/Mdk/Grem1/Prex1/Edn3/Il12a/S100a8/S100a9/Nbl1/Padi2/Bst1/Cxcl5/Ppbp/Pf4/Cxcl1/Ptn/Alox5/Trpm4/Hsd3b7/Itgam/Adam8/Calr/Ccl17/Ccl2/Ccl7/Ccl5/Ccl6/Ccr7/Lgals3/Ptk2b/Retnlg/Fpr2/Dusp1/Ch25h\nGO:0002523                                                                                                                                                                                                                                   Fut7/Mdk/S100a8/S100a9/Ppbp/Ptn/Alox5/Itgam/Adam8/Ccl2/Aoc3\nGO:0035456                                                                                                                                                                                        Aim2/Ifi204/Gbp6/Oas1c/Ifitm6/Bst2/Irgm1/Tgtp1/Tgtp2/Ifi47/Igtp/Irgm2/Ifitm7/F830016B08Rik/Iigp1/Ifit1\nGO:0002460                              Il18rap/Pla2g4a/Tnfsf18/Fcgr4/Cd46/Fut7/C8g/Ada/Il12a/Rorc/Masp2/Fosl2/Pf4/Clec7a/Pirb/Trpm4/Irf7/Ascl2/Tnfsf13b/Il12rb1/Parp3/Enpp1/Aire/Icosl/Ccr7/Gzmb/Csf2rb/Il2rb/Tnfrsf13c/Emp2/Klhl6/Tfrc/H2-K1/Tap2/Ager/C4b/H2-Q1/H2-Q2/H2-Q6/H2-T23/Cd70/C3/Cd274/Il33\n           Count\nGO:0050900    51\nGO:0071674    32\nGO:0030595    36\nGO:0002523    11\nGO:0035456    16\nGO:0002460    44\n```\n\n\n:::\n:::\n\n\nFinally, you can also visually explore enrichment results as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Barplot\nbarplot(ora_go2, showCategory = 20)\n```\n\n::: {.cell-output-display}\n![](gene_set_enrichment_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Dotplot\ndotplot(ora_go2, showCategory = 20)\n```\n\n::: {.cell-output-display}\n![](gene_set_enrichment_files/figure-html/unnamed-chunk-6-2.png){width=768}\n:::\n:::\n\n\nAlthough common, these visualization approaches are problematic \nbecause (i) they only show the top N (often 20) terms, when most of the time\nthere are hundreds of enriched terms, and (ii) the GO database contains a lot\nof redundant terms, so many of the bars or dots in these plots actually \nrepresent the same thing. The best visualization technique for \noverrepresentation analysis is **no visualization at all**. Manually looking\nat the table and summarizing results in text is a much better thing to do.\n\n## Enrichment for sequence motifs\n\nEnrichment analyses can also be used to find overrepresented sequence motifs\namong a set of sequences. For example, you may have a set of coexpressed\ngenes and want to find out if a particular sequence motif is overrepresented\nin their promoter sequences (which would likely indicate transcription\nfactor binding sites). There are many software tools for such kind of analysis,\nsuch as the MEME suite [@bailey2015meme] and the R/Bioconductor \npackage universalmotif [@tremblay2024universalmotif]. \n\n\nHere, we will use\n*[universalmotif](https://bioconductor.org/packages/3.19/universalmotif)* to find out if an example\nmotif (stored in the example data set `ArabidopsisMotif`) is significantly\noverrepresented in promoters of 50 genes in the genome \nof *Arabidopsis thaliana*. Let's first load the example data and take a quick\nlook at them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load example data: promoters and motifs of Arabidopsis thaliana\ndata(\"ArabidopsisMotif\")\ndata(\"ArabidopsisPromoters\")\n\n# Inspect data\nArabidopsisMotif\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n       Motif name:   YTTTYTTTTTYTTTY\n         Alphabet:   DNA\n             Type:   PPM\n          Strands:   +-\n         Total IC:   15.99\n      Pseudocount:   1\n        Consensus:   YTYTYTTYTTYTTTY\n     Target sites:   617\n          E-value:   2.5e-87\n\n     Y    T    Y    T    Y    T    T    Y    T    T    Y    T    T    T    Y\nA 0.01 0.00 0.00 0.00 0.00 0.06 0.00 0.01 0.00 0.00 0.02 0.00 0.00 0.00 0.00\nC 0.30 0.17 0.31 0.01 0.54 0.02 0.24 0.25 0.22 0.04 0.39 0.21 0.16 0.18 0.43\nG 0.16 0.05 0.03 0.01 0.00 0.02 0.11 0.00 0.04 0.05 0.03 0.01 0.02 0.00 0.11\nT 0.53 0.78 0.66 0.98 0.45 0.90 0.66 0.74 0.74 0.91 0.55 0.77 0.83 0.82 0.46\n```\n\n\n:::\n\n```{.r .cell-code}\nArabidopsisPromoters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDNAStringSet object of length 50:\n     width seq                                              names               \n [1]  1000 CATACAAGTAACAGAAAAACCGA...ACACTTTTGTCCGAAAACTAAG AT4G28150\n [2]  1000 TCGCTCATAGTTCTCCTAGATCG...AAATCCCAGTATTACCAACTTC AT1G19380\n [3]  1000 AATTGAAGGCTTTTACATCTTGG...TTGAAAGTCTTCAAGCAGACGC AT4G19520\n [4]  1000 TCGTAAAGTTAAAGGGAGACGTC...TTTAATAATCACATCTCTTACC AT1G03850\n [5]  1000 TACTTTTATGGATCATCATCAGA...TGTGTAATGACGATGAAAGATG AT5G01810\n ...   ... ...\n[46]  1000 ACAGCAAAAACTGAGGTGCGAAC...CAGAGAGGACTGAGGAAATTCA AT5G22690\n[47]  1000 GAATTGTGATACTATACTAATTG...GCCGTGCCCTTCATTTTCAGAA AT1G05670\n[48]  1000 CATGCTTGGTTGGTTCTTCTTGT...AAACTTAGTGCCACTTAGACAC AT1G06160\n[49]  1000 AGTTTATTGAATTAAGTTTTTAG...TAAGGAACGTTCAAGAACCAAA AT5G24660\n[50]  1000 AGCGGTATATAAAAGTTAGTGCT...AGGATGTTGATGCATGAAAATC AT3G19200\n```\n\n\n:::\n:::\n\n\nNow, to perform an enrichment analysis, we will use the `enrich_motifs()`\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform motif enrichment analysis\nenrich_motifs(\n    motifs = ArabidopsisMotif, \n    sequences = ArabidopsisPromoters, \n    shuffle.k = 3,\n    threshold = 0.001, \n    RC = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 1 row and 15 columns\n            motif   motif.i motif.consensus target.hits target.seq.hits\n      <character> <integer>     <character>   <integer>       <integer>\n1 YTTTYTTTTTYTTTY         1 YTYTYTTYTTYTTTY         244              50\n  target.seq.count  bkg.hits bkg.seq.hits bkg.seq.count        Pval        Qval\n         <integer> <integer>    <integer>     <integer>   <numeric>   <numeric>\n1               50       135           45            50 1.23587e-08 1.23587e-08\n         Eval pct.target.seq.hits pct.bkg.seq.hits target.enrichment\n    <numeric>           <numeric>        <numeric>         <numeric>\n1 2.47174e-08                 100               90           1.11111\n```\n\n\n:::\n:::\n\n\nIn principle, this analysis is very similar to what we've done for functional\nterms in the previous section: we are testing if input motifs are\nsignificantly overrepresented (or enriched) in a set of target sequences\nrelative to a set of background sequences. Like in functional enrichment \nanalyses, it's important to carefully choose a suitable background \n(or universe). For instance, if you want to find overrepresented motifs in\na set of coexpressed genes, you might want to use as background only \npromoters of expressed genes. When a background is not explicitly given,\n`enrich_motifs()` shuffles the input sequences to create a background.\n\n\n## Session information {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Arctic/Longyearbyen\n date     2025-03-12\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version  date (UTC) lib source\n abind                  1.4-5    2016-07-21 [1] CRAN (R 4.4.1)\n AnnotationDbi        * 1.66.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n ape                    5.8      2024-04-11 [1] CRAN (R 4.4.1)\n aplot                  0.2.3    2024-06-17 [1] CRAN (R 4.4.1)\n Biobase              * 2.64.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocGenerics         * 0.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocManager            1.30.23  2024-05-04 [1] CRAN (R 4.4.1)\n BiocParallel           1.38.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n BiocStyle              2.32.1   2024-06-16 [1] Bioconductor 3.19 (R 4.4.1)\n Biostrings             2.72.1   2024-06-02 [1] Bioconductor 3.19 (R 4.4.1)\n bit                    4.0.5    2022-11-15 [1] CRAN (R 4.4.1)\n bit64                  4.0.5    2020-08-30 [1] CRAN (R 4.4.1)\n blob                   1.2.4    2023-03-17 [1] CRAN (R 4.4.1)\n cachem                 1.1.0    2024-05-16 [1] CRAN (R 4.4.1)\n cli                    3.6.3    2024-06-21 [1] CRAN (R 4.4.1)\n clusterProfiler      * 4.12.1   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n codetools              0.2-20   2024-03-31 [1] CRAN (R 4.4.1)\n colorspace             2.1-0    2023-01-23 [1] CRAN (R 4.4.1)\n cowplot                1.1.3    2024-01-22 [1] CRAN (R 4.4.1)\n crayon                 1.5.3    2024-06-20 [1] CRAN (R 4.4.1)\n data.table             1.15.4   2024-03-30 [1] CRAN (R 4.4.1)\n DBI                    1.2.3    2024-06-02 [1] CRAN (R 4.4.1)\n DelayedArray           0.30.1   2024-05-07 [1] Bioconductor 3.19 (R 4.4.1)\n DESeq2               * 1.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n digest                 0.6.36   2024-06-23 [1] CRAN (R 4.4.1)\n DOSE                   3.30.2   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n dplyr                * 1.1.4    2023-11-17 [1] CRAN (R 4.4.1)\n enrichplot           * 1.24.2   2024-07-21 [1] Bioconductor 3.19 (R 4.4.1)\n evaluate               0.24.0   2024-06-10 [1] CRAN (R 4.4.1)\n fansi                  1.0.6    2023-12-08 [1] CRAN (R 4.4.1)\n farver                 2.1.2    2024-05-13 [1] CRAN (R 4.4.1)\n fastmap                1.2.0    2024-05-15 [1] CRAN (R 4.4.1)\n fastmatch              1.1-4    2023-08-18 [1] CRAN (R 4.4.1)\n fgsea                  1.30.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n forcats              * 1.0.0    2023-01-29 [1] CRAN (R 4.4.1)\n fs                     1.6.4    2024-04-25 [1] CRAN (R 4.4.1)\n generics               0.1.3    2022-07-05 [1] CRAN (R 4.4.1)\n GenomeInfoDb         * 1.40.1   2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n GenomeInfoDbData       1.2.12   2024-07-24 [1] Bioconductor\n GenomicRanges        * 1.56.1   2024-06-12 [1] Bioconductor 3.19 (R 4.4.1)\n ggforce                0.4.2    2024-02-19 [1] CRAN (R 4.4.1)\n ggfun                  0.1.5    2024-05-28 [1] CRAN (R 4.4.1)\n ggplot2              * 3.5.1    2024-04-23 [1] CRAN (R 4.4.1)\n ggplotify              0.1.2    2023-08-09 [1] CRAN (R 4.4.1)\n ggraph                 2.2.1    2024-03-07 [1] CRAN (R 4.4.1)\n ggrepel                0.9.5    2024-01-10 [1] CRAN (R 4.4.1)\n ggtree                 3.12.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n glue                   1.7.0    2024-01-09 [1] CRAN (R 4.4.1)\n GO.db                  3.19.1   2024-07-24 [1] Bioconductor\n GOSemSim               2.30.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n graphlayouts           1.1.1    2024-03-09 [1] CRAN (R 4.4.1)\n gridExtra              2.3      2017-09-09 [1] CRAN (R 4.4.1)\n gridGraphics           0.5-1    2020-12-13 [1] CRAN (R 4.4.1)\n gson                   0.1.0    2023-03-07 [1] CRAN (R 4.4.1)\n gtable                 0.3.5    2024-04-22 [1] CRAN (R 4.4.1)\n HDO.db                 0.99.1   2024-07-24 [1] Bioconductor\n here                 * 1.0.1    2020-12-13 [1] CRAN (R 4.4.1)\n hms                    1.1.3    2023-03-21 [1] CRAN (R 4.4.1)\n htmltools              0.5.8.1  2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets            1.6.4    2023-12-06 [1] CRAN (R 4.4.1)\n httr                   1.4.7    2023-08-15 [1] CRAN (R 4.4.1)\n igraph                 2.0.3    2024-03-13 [1] CRAN (R 4.4.1)\n IRanges              * 2.38.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n jsonlite               1.8.8    2023-12-04 [1] CRAN (R 4.4.1)\n KEGGREST               1.44.1   2024-06-19 [1] Bioconductor 3.19 (R 4.4.1)\n knitr                  1.48     2024-07-07 [1] CRAN (R 4.4.1)\n labeling               0.4.3    2023-08-29 [1] CRAN (R 4.4.1)\n lattice                0.22-6   2024-03-20 [1] CRAN (R 4.4.1)\n lazyeval               0.2.2    2019-03-15 [1] CRAN (R 4.4.1)\n lifecycle              1.0.4    2023-11-07 [1] CRAN (R 4.4.1)\n locfit                 1.5-9.10 2024-06-24 [1] CRAN (R 4.4.1)\n lubridate            * 1.9.3    2023-09-27 [1] CRAN (R 4.4.1)\n magrittr               2.0.3    2022-03-30 [1] CRAN (R 4.4.1)\n MASS                   7.3-61   2024-06-13 [1] CRAN (R 4.4.1)\n Matrix                 1.7-0    2024-04-26 [1] CRAN (R 4.4.1)\n MatrixGenerics       * 1.16.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n matrixStats          * 1.3.0    2024-04-11 [1] CRAN (R 4.4.1)\n memoise                2.0.1    2021-11-26 [1] CRAN (R 4.4.1)\n munsell                0.5.1    2024-04-01 [1] CRAN (R 4.4.1)\n nlme                   3.1-165  2024-06-06 [1] CRAN (R 4.4.1)\n org.Mm.eg.db         * 3.19.1   2024-09-02 [1] Bioconductor\n patchwork              1.2.0    2024-01-08 [1] CRAN (R 4.4.1)\n pillar                 1.9.0    2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig              2.0.3    2019-09-22 [1] CRAN (R 4.4.1)\n plyr                   1.8.9    2023-10-02 [1] CRAN (R 4.4.1)\n png                    0.1-8    2022-11-29 [1] CRAN (R 4.4.1)\n polyclip               1.10-7   2024-07-23 [1] CRAN (R 4.4.1)\n purrr                * 1.0.2    2023-08-10 [1] CRAN (R 4.4.1)\n qvalue                 2.36.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n R6                     2.5.1    2021-08-19 [1] CRAN (R 4.4.1)\n RColorBrewer           1.1-3    2022-04-03 [1] CRAN (R 4.4.1)\n Rcpp                   1.0.13   2024-07-17 [1] CRAN (R 4.4.1)\n readr                * 2.1.5    2024-01-10 [1] CRAN (R 4.4.1)\n reshape2               1.4.4    2020-04-09 [1] CRAN (R 4.4.1)\n rlang                  1.1.4    2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown              2.27     2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot              2.0.4    2023-11-05 [1] CRAN (R 4.4.1)\n RSQLite                2.3.7    2024-05-27 [1] CRAN (R 4.4.1)\n rstudioapi             0.16.0   2024-03-24 [1] CRAN (R 4.4.1)\n S4Arrays               1.4.1    2024-05-20 [1] Bioconductor 3.19 (R 4.4.1)\n S4Vectors            * 0.42.1   2024-07-03 [1] Bioconductor 3.19 (R 4.4.1)\n scales                 1.3.0    2023-11-28 [1] CRAN (R 4.4.1)\n scatterpie             0.2.3    2024-06-05 [1] CRAN (R 4.4.1)\n sessioninfo            1.2.2    2021-12-06 [1] CRAN (R 4.4.1)\n shadowtext             0.1.4    2024-07-18 [1] CRAN (R 4.4.1)\n SparseArray            1.4.8    2024-05-24 [1] Bioconductor 3.19 (R 4.4.1)\n stringi                1.8.4    2024-05-06 [1] CRAN (R 4.4.1)\n stringr              * 1.5.1    2023-11-14 [1] CRAN (R 4.4.1)\n SummarizedExperiment * 1.34.0   2024-05-01 [1] Bioconductor 3.19 (R 4.4.1)\n tibble               * 3.2.1    2023-03-20 [1] CRAN (R 4.4.1)\n tidygraph              1.3.1    2024-01-30 [1] CRAN (R 4.4.1)\n tidyr                * 1.3.1    2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect             1.2.1    2024-03-11 [1] CRAN (R 4.4.1)\n tidytree               0.4.6    2023-12-12 [1] CRAN (R 4.4.1)\n tidyverse            * 2.0.0    2023-02-22 [1] CRAN (R 4.4.1)\n timechange             0.3.0    2024-01-18 [1] CRAN (R 4.4.1)\n treeio                 1.28.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n tweenr                 2.0.3    2024-02-26 [1] CRAN (R 4.4.1)\n tzdb                   0.4.0    2023-05-12 [1] CRAN (R 4.4.1)\n UCSC.utils             1.0.0    2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n universalmotif       * 1.22.3   2024-10-02 [1] Bioconductor 3.19 (R 4.4.1)\n utf8                   1.2.4    2023-10-22 [1] CRAN (R 4.4.1)\n vctrs                  0.6.5    2023-12-01 [1] CRAN (R 4.4.1)\n viridis                0.6.5    2024-01-29 [1] CRAN (R 4.4.1)\n viridisLite            0.4.2    2023-05-02 [1] CRAN (R 4.4.1)\n withr                  3.0.0    2024-01-16 [1] CRAN (R 4.4.1)\n xfun                   0.46     2024-07-18 [1] CRAN (R 4.4.1)\n XVector                0.44.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n yaml                   2.3.9    2024-07-05 [1] CRAN (R 4.4.1)\n yulab.utils            0.1.4    2024-01-28 [1] CRAN (R 4.4.1)\n zlibbioc               1.50.0   2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n\n",
    "supporting": [
      "gene_set_enrichment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}